{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analyticsadmin_v1beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar analyticsadmin_v1beta;\n(function (analyticsadmin_v1beta) {\n  /**\n   * Google Analytics Admin API\n   *\n   * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const analyticsadmin = google.analyticsadmin('v1beta');\n   * ```\n   */\n  class Analyticsadmin {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.accounts = new Resource$Accounts(this.context);\n      this.accountSummaries = new Resource$Accountsummaries(this.context);\n      this.properties = new Resource$Properties(this.context);\n    }\n  }\n  analyticsadmin_v1beta.Analyticsadmin = Analyticsadmin;\n  class Resource$Accounts {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getDataSharingSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    provisionAccountTicket(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/accounts:provisionAccountTicket').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    runAccessReport(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+entity}:runAccessReport').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entity'],\n        pathParams: ['entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    searchChangeHistoryEvents(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+account}:searchChangeHistoryEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['account'],\n        pathParams: ['account'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Accounts = Resource$Accounts;\n  class Resource$Accountsummaries {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/accountSummaries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Accountsummaries = Resource$Accountsummaries;\n  class Resource$Properties {\n    constructor(context) {\n      this.context = context;\n      this.conversionEvents = new Resource$Properties$Conversionevents(this.context);\n      this.customDimensions = new Resource$Properties$Customdimensions(this.context);\n      this.customMetrics = new Resource$Properties$Custommetrics(this.context);\n      this.dataStreams = new Resource$Properties$Datastreams(this.context);\n      this.firebaseLinks = new Resource$Properties$Firebaselinks(this.context);\n      this.googleAdsLinks = new Resource$Properties$Googleadslinks(this.context);\n      this.keyEvents = new Resource$Properties$Keyevents(this.context);\n    }\n    acknowledgeUserDataCollection(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+property}:acknowledgeUserDataCollection').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['property'],\n        pathParams: ['property'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getDataRetentionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    runAccessReport(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+entity}:runAccessReport').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entity'],\n        pathParams: ['entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateDataRetentionSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties = Resource$Properties;\n  class Resource$Properties$Conversionevents {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/conversionEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/conversionEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Conversionevents = Resource$Properties$Conversionevents;\n  class Resource$Properties$Customdimensions {\n    constructor(context) {\n      this.context = context;\n    }\n    archive(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}:archive').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Customdimensions = Resource$Properties$Customdimensions;\n  class Resource$Properties$Custommetrics {\n    constructor(context) {\n      this.context = context;\n    }\n    archive(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}:archive').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Custommetrics = Resource$Properties$Custommetrics;\n  class Resource$Properties$Datastreams {\n    constructor(context) {\n      this.context = context;\n      this.measurementProtocolSecrets = new Resource$Properties$Datastreams$Measurementprotocolsecrets(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/dataStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/dataStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Datastreams = Resource$Properties$Datastreams;\n  class Resource$Properties$Datastreams$Measurementprotocolsecrets {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/measurementProtocolSecrets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/measurementProtocolSecrets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Datastreams$Measurementprotocolsecrets = Resource$Properties$Datastreams$Measurementprotocolsecrets;\n  class Resource$Properties$Firebaselinks {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/firebaseLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/firebaseLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Firebaselinks = Resource$Properties$Firebaselinks;\n  class Resource$Properties$Googleadslinks {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/googleAdsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/googleAdsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Googleadslinks = Resource$Properties$Googleadslinks;\n  class Resource$Properties$Keyevents {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/keyEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+parent}/keyEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  analyticsadmin_v1beta.Resource$Properties$Keyevents = Resource$Properties$Keyevents;\n})(analyticsadmin_v1beta || (exports.analyticsadmin_v1beta = analyticsadmin_v1beta = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","analyticsadmin_v1beta","googleapis_common_1","require","Analyticsadmin","constructor","options","google","context","_options","accounts","Resource$Accounts","accountSummaries","Resource$Accountsummaries","properties","Resource$Properties","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","apiVersion","requiredParams","pathParams","createAPIRequest","get","getDataSharingSettings","list","patch","provisionAccountTicket","runAccessReport","searchChangeHistoryEvents","conversionEvents","Resource$Properties$Conversionevents","customDimensions","Resource$Properties$Customdimensions","customMetrics","Resource$Properties$Custommetrics","dataStreams","Resource$Properties$Datastreams","firebaseLinks","Resource$Properties$Firebaselinks","googleAdsLinks","Resource$Properties$Googleadslinks","keyEvents","Resource$Properties$Keyevents","acknowledgeUserDataCollection","create","getDataRetentionSettings","updateDataRetentionSettings","archive","measurementProtocolSecrets","Resource$Properties$Datastreams$Measurementprotocolsecrets"],"sources":["C:/Users/citla/codebase/playingWithCursor/projects/javascript/node_modules/googleapis/build/src/apis/analyticsadmin/v1beta.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.analyticsadmin_v1beta = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar analyticsadmin_v1beta;\n(function (analyticsadmin_v1beta) {\n    /**\n     * Google Analytics Admin API\n     *\n     * Manage properties in Google Analytics. Warning: Creating multiple Customer Applications, Accounts, or Projects to simulate or act as a single Customer Application, Account, or Project (respectively) or to circumvent Service-specific usage limits or quotas is a direct violation of Google Cloud Platform Terms of Service as well as Google APIs Terms of Service. These actions can result in immediate termination of your GCP project(s) without any warning.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const analyticsadmin = google.analyticsadmin('v1beta');\n     * ```\n     */\n    class Analyticsadmin {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.accounts = new Resource$Accounts(this.context);\n            this.accountSummaries = new Resource$Accountsummaries(this.context);\n            this.properties = new Resource$Properties(this.context);\n        }\n    }\n    analyticsadmin_v1beta.Analyticsadmin = Analyticsadmin;\n    class Resource$Accounts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getDataSharingSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        provisionAccountTicket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/accounts:provisionAccountTicket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        runAccessReport(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+entity}:runAccessReport').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entity'],\n                pathParams: ['entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchChangeHistoryEvents(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+account}:searchChangeHistoryEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['account'],\n                pathParams: ['account'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Accounts = Resource$Accounts;\n    class Resource$Accountsummaries {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/accountSummaries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Accountsummaries = Resource$Accountsummaries;\n    class Resource$Properties {\n        constructor(context) {\n            this.context = context;\n            this.conversionEvents = new Resource$Properties$Conversionevents(this.context);\n            this.customDimensions = new Resource$Properties$Customdimensions(this.context);\n            this.customMetrics = new Resource$Properties$Custommetrics(this.context);\n            this.dataStreams = new Resource$Properties$Datastreams(this.context);\n            this.firebaseLinks = new Resource$Properties$Firebaselinks(this.context);\n            this.googleAdsLinks = new Resource$Properties$Googleadslinks(this.context);\n            this.keyEvents = new Resource$Properties$Keyevents(this.context);\n        }\n        acknowledgeUserDataCollection(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+property}:acknowledgeUserDataCollection').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['property'],\n                pathParams: ['property'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getDataRetentionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/properties').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        runAccessReport(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+entity}:runAccessReport').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entity'],\n                pathParams: ['entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateDataRetentionSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties = Resource$Properties;\n    class Resource$Properties$Conversionevents {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/conversionEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/conversionEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Conversionevents = Resource$Properties$Conversionevents;\n    class Resource$Properties$Customdimensions {\n        constructor(context) {\n            this.context = context;\n        }\n        archive(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}:archive').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/customDimensions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Customdimensions = Resource$Properties$Customdimensions;\n    class Resource$Properties$Custommetrics {\n        constructor(context) {\n            this.context = context;\n        }\n        archive(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}:archive').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/customMetrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Custommetrics = Resource$Properties$Custommetrics;\n    class Resource$Properties$Datastreams {\n        constructor(context) {\n            this.context = context;\n            this.measurementProtocolSecrets =\n                new Resource$Properties$Datastreams$Measurementprotocolsecrets(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/dataStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/dataStreams').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Datastreams = Resource$Properties$Datastreams;\n    class Resource$Properties$Datastreams$Measurementprotocolsecrets {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/measurementProtocolSecrets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/measurementProtocolSecrets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Datastreams$Measurementprotocolsecrets = Resource$Properties$Datastreams$Measurementprotocolsecrets;\n    class Resource$Properties$Firebaselinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/firebaseLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/firebaseLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Firebaselinks = Resource$Properties$Firebaselinks;\n    class Resource$Properties$Googleadslinks {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/googleAdsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/googleAdsLinks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Googleadslinks = Resource$Properties$Googleadslinks;\n    class Resource$Properties$Keyevents {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/keyEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+parent}/keyEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://analyticsadmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1beta/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    analyticsadmin_v1beta.Resource$Properties$Keyevents = Resource$Properties$Keyevents;\n})(analyticsadmin_v1beta || (exports.analyticsadmin_v1beta = analyticsadmin_v1beta = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}