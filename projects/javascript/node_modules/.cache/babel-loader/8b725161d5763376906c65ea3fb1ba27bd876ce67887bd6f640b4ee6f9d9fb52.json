{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.displayvideo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar displayvideo_v2;\n(function (displayvideo_v2) {\n  /**\n   * Display &amp; Video 360 API\n   *\n   * Display &amp; Video 360 API allows users to automate complex Display &amp; Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const displayvideo = google.displayvideo('v2');\n   * ```\n   */\n  class Displayvideo {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.advertisers = new Resource$Advertisers(this.context);\n      this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n      this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n      this.customLists = new Resource$Customlists(this.context);\n      this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n      this.googleAudiences = new Resource$Googleaudiences(this.context);\n      this.guaranteedOrders = new Resource$Guaranteedorders(this.context);\n      this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n      this.inventorySources = new Resource$Inventorysources(this.context);\n      this.media = new Resource$Media(this.context);\n      this.partners = new Resource$Partners(this.context);\n      this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n      this.targetingTypes = new Resource$Targetingtypes(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n  }\n  displayvideo_v2.Displayvideo = Displayvideo;\n  class Resource$Advertisers {\n    constructor(context) {\n      this.context = context;\n      this.assets = new Resource$Advertisers$Assets(this.context);\n      this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n      this.channels = new Resource$Advertisers$Channels(this.context);\n      this.creatives = new Resource$Advertisers$Creatives(this.context);\n      this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n      this.invoices = new Resource$Advertisers$Invoices(this.context);\n      this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n      this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n      this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n      this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n      this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n      this.youtubeAdGroupAds = new Resource$Advertisers$Youtubeadgroupads(this.context);\n      this.youtubeAdGroups = new Resource$Advertisers$Youtubeadgroups(this.context);\n    }\n    audit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers = Resource$Advertisers;\n  class Resource$Advertisers$Assets {\n    constructor(context) {\n      this.context = context;\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n  class Resource$Advertisers$Campaigns {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'campaignId'],\n        pathParams: ['advertiserId', 'campaignId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n  class Resource$Advertisers$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n  class Resource$Advertisers$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'channelId'],\n        pathParams: ['advertiserId', 'channelId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n  class Resource$Advertisers$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'creativeId'],\n        pathParams: ['advertiserId', 'creativeId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n  class Resource$Advertisers$Insertionorders {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'insertionOrderId'],\n        pathParams: ['advertiserId', 'insertionOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n  class Resource$Advertisers$Invoices {\n    constructor(context) {\n      this.context = context;\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    lookupInvoiceCurrency(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices:lookupInvoiceCurrency').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Invoices = Resource$Advertisers$Invoices;\n  class Resource$Advertisers$Lineitems {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n    }\n    bulkEditAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkEditAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkListAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkListAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    bulkUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    duplicate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}:duplicate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateDefault(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:generateDefault').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId'],\n        pathParams: ['advertiserId', 'lineItemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n  class Resource$Advertisers$Lineitems$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n  class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Advertisers$Locationlists {\n    constructor(context) {\n      this.context = context;\n      this.assignedLocations = new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n  class Resource$Advertisers$Locationlists$Assignedlocations {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId', 'assignedLocationId'],\n        pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'locationListId'],\n        pathParams: ['advertiserId', 'locationListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n  class Resource$Advertisers$Manualtriggers {\n    constructor(context) {\n      this.context = context;\n    }\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deactivate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'triggerId'],\n        pathParams: ['advertiserId', 'triggerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n  class Resource$Advertisers$Negativekeywordlists {\n    constructor(context) {\n      this.context = context;\n      this.negativeKeywords = new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n  class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId', 'keywordValue'],\n        pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'negativeKeywordListId'],\n        pathParams: ['advertiserId', 'negativeKeywordListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n  class Resource$Advertisers$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n  class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Advertisers$Youtubeadgroupads {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds/{+youtubeAdGroupAdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupAdId'],\n        pathParams: ['advertiserId', 'youtubeAdGroupAdId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroupads = Resource$Advertisers$Youtubeadgroupads;\n  class Resource$Advertisers$Youtubeadgroups {\n    constructor(context) {\n      this.context = context;\n      this.targetingTypes = new Resource$Advertisers$Youtubeadgroups$Targetingtypes(this.context);\n    }\n    bulkListAdGroupAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups:bulkListAdGroupAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupId'],\n        pathParams: ['advertiserId', 'youtubeAdGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId'],\n        pathParams: ['advertiserId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroups = Resource$Advertisers$Youtubeadgroups;\n  class Resource$Advertisers$Youtubeadgroups$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes = Resource$Advertisers$Youtubeadgroups$Targetingtypes;\n  class Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['advertiserId', 'assignedTargetingOptionId', 'targetingType', 'youtubeAdGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['advertiserId', 'youtubeAdGroupId', 'targetingType'],\n        pathParams: ['advertiserId', 'targetingType', 'youtubeAdGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Combinedaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['combinedAudienceId'],\n        pathParams: ['combinedAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Combinedaudiences = Resource$Combinedaudiences;\n  class Resource$Custombiddingalgorithms {\n    constructor(context) {\n      this.context = context;\n      this.scripts = new Resource$Custombiddingalgorithms$Scripts(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    uploadScript(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}:uploadScript').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n  class Resource$Custombiddingalgorithms$Scripts {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts/{+customBiddingScriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n        pathParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customBiddingAlgorithmId'],\n        pathParams: ['customBiddingAlgorithmId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Custombiddingalgorithms$Scripts = Resource$Custombiddingalgorithms$Scripts;\n  class Resource$Customlists {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['customListId'],\n        pathParams: ['customListId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Customlists = Resource$Customlists;\n  class Resource$Floodlightgroups {\n    constructor(context) {\n      this.context = context;\n      this.floodlightActivities = new Resource$Floodlightgroups$Floodlightactivities(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Floodlightgroups = Resource$Floodlightgroups;\n  class Resource$Floodlightgroups$Floodlightactivities {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}/floodlightActivities/{+floodlightActivityId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId', 'floodlightActivityId'],\n        pathParams: ['floodlightActivityId', 'floodlightGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}/floodlightActivities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['floodlightGroupId'],\n        pathParams: ['floodlightGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Floodlightgroups$Floodlightactivities = Resource$Floodlightgroups$Floodlightactivities;\n  class Resource$Googleaudiences {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['googleAudienceId'],\n        pathParams: ['googleAudienceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Googleaudiences = Resource$Googleaudiences;\n  class Resource$Guaranteedorders {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editGuaranteedOrderReadAccessors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}:editGuaranteedOrderReadAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['guaranteedOrderId'],\n        pathParams: ['guaranteedOrderId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Guaranteedorders = Resource$Guaranteedorders;\n  class Resource$Inventorysourcegroups {\n    constructor(context) {\n      this.context = context;\n      this.assignedInventorySources = new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n  class Resource$Inventorysourcegroups$Assignedinventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n        pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceGroupId'],\n        pathParams: ['inventorySourceGroupId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n  class Resource$Inventorysources {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    editInventorySourceReadWriteAccessors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}:editInventorySourceReadWriteAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['inventorySourceId'],\n        pathParams: ['inventorySourceId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Inventorysources = Resource$Inventorysources;\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n    download(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['resourceName'],\n        pathParams: ['resourceName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Media = Resource$Media;\n  class Resource$Partners {\n    constructor(context) {\n      this.context = context;\n      this.channels = new Resource$Partners$Channels(this.context);\n      this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n    }\n    editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners = Resource$Partners;\n  class Resource$Partners$Channels {\n    constructor(context) {\n      this.context = context;\n      this.sites = new Resource$Partners$Channels$Sites(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId'],\n        pathParams: ['partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners$Channels = Resource$Partners$Channels;\n  class Resource$Partners$Channels$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n        pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    replace(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'channelId'],\n        pathParams: ['channelId', 'partnerId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n  class Resource$Partners$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.assignedTargetingOptions = new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n  class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType', 'assignedTargetingOptionId'],\n        pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['partnerId', 'targetingType'],\n        pathParams: ['partnerId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n  class Resource$Sdfdownloadtasks {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n  class Resource$Sdfdownloadtasks$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n  class Resource$Targetingtypes {\n    constructor(context) {\n      this.context = context;\n      this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n    }\n  }\n  displayvideo_v2.Resource$Targetingtypes = Resource$Targetingtypes;\n  class Resource$Targetingtypes$Targetingoptions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['targetingType', 'targetingOptionId'],\n        pathParams: ['targetingOptionId', 'targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['targetingType'],\n        pathParams: ['targetingType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  displayvideo_v2.Resource$Users = Resource$Users;\n})(displayvideo_v2 || (exports.displayvideo_v2 = displayvideo_v2 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","displayvideo_v2","googleapis_common_1","require","Displayvideo","constructor","options","google","context","_options","advertisers","Resource$Advertisers","combinedAudiences","Resource$Combinedaudiences","customBiddingAlgorithms","Resource$Custombiddingalgorithms","customLists","Resource$Customlists","floodlightGroups","Resource$Floodlightgroups","googleAudiences","Resource$Googleaudiences","guaranteedOrders","Resource$Guaranteedorders","inventorySourceGroups","Resource$Inventorysourcegroups","inventorySources","Resource$Inventorysources","media","Resource$Media","partners","Resource$Partners","sdfdownloadtasks","Resource$Sdfdownloadtasks","targetingTypes","Resource$Targetingtypes","users","Resource$Users","assets","Resource$Advertisers$Assets","campaigns","Resource$Advertisers$Campaigns","channels","Resource$Advertisers$Channels","creatives","Resource$Advertisers$Creatives","insertionOrders","Resource$Advertisers$Insertionorders","invoices","Resource$Advertisers$Invoices","lineItems","Resource$Advertisers$Lineitems","locationLists","Resource$Advertisers$Locationlists","manualTriggers","Resource$Advertisers$Manualtriggers","negativeKeywordLists","Resource$Advertisers$Negativekeywordlists","Resource$Advertisers$Targetingtypes","youtubeAdGroupAds","Resource$Advertisers$Youtubeadgroupads","youtubeAdGroups","Resource$Advertisers$Youtubeadgroups","audit","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","apiVersion","requiredParams","pathParams","createAPIRequest","create","delete","editAssignedTargetingOptions","get","list","listAssignedTargetingOptions","patch","upload","mediaUrl","sites","Resource$Advertisers$Channels$Sites","bulkEdit","lookupInvoiceCurrency","Resource$Advertisers$Lineitems$Targetingtypes","bulkEditAssignedTargetingOptions","bulkListAssignedTargetingOptions","bulkUpdate","duplicate","generateDefault","assignedTargetingOptions","Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions","assignedLocations","Resource$Advertisers$Locationlists$Assignedlocations","activate","deactivate","negativeKeywords","Resource$Advertisers$Negativekeywordlists$Negativekeywords","Resource$Advertisers$Targetingtypes$Assignedtargetingoptions","Resource$Advertisers$Youtubeadgroups$Targetingtypes","bulkListAdGroupAssignedTargetingOptions","Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions","scripts","Resource$Custombiddingalgorithms$Scripts","uploadScript","floodlightActivities","Resource$Floodlightgroups$Floodlightactivities","editGuaranteedOrderReadAccessors","assignedInventorySources","Resource$Inventorysourcegroups$Assignedinventorysources","editInventorySourceReadWriteAccessors","download","Resource$Partners$Channels","Resource$Partners$Targetingtypes","Resource$Partners$Channels$Sites","Resource$Partners$Targetingtypes$Assignedtargetingoptions","operations","Resource$Sdfdownloadtasks$Operations","targetingOptions","Resource$Targetingtypes$Targetingoptions","search","bulkEditAssignedUserRoles"],"sources":["C:/Users/citla/codebase/playingWithCursor/projects/javascript/node_modules/googleapis/build/src/apis/displayvideo/v2.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.displayvideo_v2 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar displayvideo_v2;\n(function (displayvideo_v2) {\n    /**\n     * Display &amp; Video 360 API\n     *\n     * Display &amp; Video 360 API allows users to automate complex Display &amp; Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const displayvideo = google.displayvideo('v2');\n     * ```\n     */\n    class Displayvideo {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.advertisers = new Resource$Advertisers(this.context);\n            this.combinedAudiences = new Resource$Combinedaudiences(this.context);\n            this.customBiddingAlgorithms = new Resource$Custombiddingalgorithms(this.context);\n            this.customLists = new Resource$Customlists(this.context);\n            this.floodlightGroups = new Resource$Floodlightgroups(this.context);\n            this.googleAudiences = new Resource$Googleaudiences(this.context);\n            this.guaranteedOrders = new Resource$Guaranteedorders(this.context);\n            this.inventorySourceGroups = new Resource$Inventorysourcegroups(this.context);\n            this.inventorySources = new Resource$Inventorysources(this.context);\n            this.media = new Resource$Media(this.context);\n            this.partners = new Resource$Partners(this.context);\n            this.sdfdownloadtasks = new Resource$Sdfdownloadtasks(this.context);\n            this.targetingTypes = new Resource$Targetingtypes(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    displayvideo_v2.Displayvideo = Displayvideo;\n    class Resource$Advertisers {\n        constructor(context) {\n            this.context = context;\n            this.assets = new Resource$Advertisers$Assets(this.context);\n            this.campaigns = new Resource$Advertisers$Campaigns(this.context);\n            this.channels = new Resource$Advertisers$Channels(this.context);\n            this.creatives = new Resource$Advertisers$Creatives(this.context);\n            this.insertionOrders = new Resource$Advertisers$Insertionorders(this.context);\n            this.invoices = new Resource$Advertisers$Invoices(this.context);\n            this.lineItems = new Resource$Advertisers$Lineitems(this.context);\n            this.locationLists = new Resource$Advertisers$Locationlists(this.context);\n            this.manualTriggers = new Resource$Advertisers$Manualtriggers(this.context);\n            this.negativeKeywordLists = new Resource$Advertisers$Negativekeywordlists(this.context);\n            this.targetingTypes = new Resource$Advertisers$Targetingtypes(this.context);\n            this.youtubeAdGroupAds = new Resource$Advertisers$Youtubeadgroupads(this.context);\n            this.youtubeAdGroups = new Resource$Advertisers$Youtubeadgroups(this.context);\n        }\n        audit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}:audit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}:listAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers = Resource$Advertisers;\n    class Resource$Advertisers$Assets {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v2/advertisers/{+advertiserId}/assets').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Assets = Resource$Advertisers$Assets;\n    class Resource$Advertisers$Campaigns {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/campaigns/{+campaignId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'campaignId'],\n                pathParams: ['advertiserId', 'campaignId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Campaigns = Resource$Advertisers$Campaigns;\n    class Resource$Advertisers$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Advertisers$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Channels = Resource$Advertisers$Channels;\n    class Resource$Advertisers$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                pathParams: ['advertiserId', 'channelId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'channelId'],\n                pathParams: ['advertiserId', 'channelId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Channels$Sites = Resource$Advertisers$Channels$Sites;\n    class Resource$Advertisers$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/creatives/{+creativeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'creativeId'],\n                pathParams: ['advertiserId', 'creativeId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Creatives = Resource$Advertisers$Creatives;\n    class Resource$Advertisers$Insertionorders {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/insertionOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/insertionOrders/{+insertionOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'insertionOrderId'],\n                pathParams: ['advertiserId', 'insertionOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Insertionorders = Resource$Advertisers$Insertionorders;\n    class Resource$Advertisers$Invoices {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/invoices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        lookupInvoiceCurrency(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/invoices:lookupInvoiceCurrency').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Invoices = Resource$Advertisers$Invoices;\n    class Resource$Advertisers$Lineitems {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes = new Resource$Advertisers$Lineitems$Targetingtypes(this.context);\n        }\n        bulkEditAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:bulkEditAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkListAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:bulkListAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        bulkUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems:bulkUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        duplicate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}:duplicate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateDefault(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems:generateDefault').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/lineItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId'],\n                pathParams: ['advertiserId', 'lineItemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems = Resource$Advertisers$Lineitems;\n    class Resource$Advertisers$Lineitems$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes = Resource$Advertisers$Lineitems$Targetingtypes;\n    class Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'lineItemId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'lineItemId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/lineItems/{+lineItemId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                pathParams: ['advertiserId', 'lineItemId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Lineitems$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Locationlists {\n        constructor(context) {\n            this.context = context;\n            this.assignedLocations =\n                new Resource$Advertisers$Locationlists$Assignedlocations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/locationLists/{+locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/locationLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/locationLists/{locationListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Locationlists = Resource$Advertisers$Locationlists;\n    class Resource$Advertisers$Locationlists$Assignedlocations {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{+locationListId}/assignedLocations:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{+assignedLocationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'locationListId',\n                    'assignedLocationId',\n                ],\n                pathParams: ['advertiserId', 'assignedLocationId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'locationListId'],\n                pathParams: ['advertiserId', 'locationListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Locationlists$Assignedlocations = Resource$Advertisers$Locationlists$Assignedlocations;\n    class Resource$Advertisers$Manualtriggers {\n        constructor(context) {\n            this.context = context;\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deactivate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}:deactivate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/manualTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/manualTriggers/{+triggerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'triggerId'],\n                pathParams: ['advertiserId', 'triggerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Manualtriggers = Resource$Advertisers$Manualtriggers;\n    class Resource$Advertisers$Negativekeywordlists {\n        constructor(context) {\n            this.context = context;\n            this.negativeKeywords =\n                new Resource$Advertisers$Negativekeywordlists$Negativekeywords(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/negativeKeywordLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{negativeKeywordListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Negativekeywordlists = Resource$Advertisers$Negativekeywordlists;\n    class Resource$Advertisers$Negativekeywordlists$Negativekeywords {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords/{+keywordValue}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'negativeKeywordListId',\n                    'keywordValue',\n                ],\n                pathParams: ['advertiserId', 'keywordValue', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{advertiserId}/negativeKeywordLists/{+negativeKeywordListId}/negativeKeywords:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'negativeKeywordListId'],\n                pathParams: ['advertiserId', 'negativeKeywordListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Negativekeywordlists$Negativekeywords = Resource$Advertisers$Negativekeywordlists$Negativekeywords;\n    class Resource$Advertisers$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Targetingtypes = Resource$Advertisers$Targetingtypes;\n    class Resource$Advertisers$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Advertisers$Youtubeadgroupads {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds/{+youtubeAdGroupAdId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'youtubeAdGroupAdId'],\n                pathParams: ['advertiserId', 'youtubeAdGroupAdId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroupAds').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroupads = Resource$Advertisers$Youtubeadgroupads;\n    class Resource$Advertisers$Youtubeadgroups {\n        constructor(context) {\n            this.context = context;\n            this.targetingTypes =\n                new Resource$Advertisers$Youtubeadgroups$Targetingtypes(this.context);\n        }\n        bulkListAdGroupAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups:bulkListAdGroupAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'youtubeAdGroupId'],\n                pathParams: ['advertiserId', 'youtubeAdGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/advertisers/{+advertiserId}/youtubeAdGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId'],\n                pathParams: ['advertiserId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroups = Resource$Advertisers$Youtubeadgroups;\n    class Resource$Advertisers$Youtubeadgroups$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes = Resource$Advertisers$Youtubeadgroups$Targetingtypes;\n    class Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'advertiserId',\n                    'youtubeAdGroupId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: [\n                    'advertiserId',\n                    'assignedTargetingOptionId',\n                    'targetingType',\n                    'youtubeAdGroupId',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/advertisers/{+advertiserId}/youtubeAdGroups/{+youtubeAdGroupId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['advertiserId', 'youtubeAdGroupId', 'targetingType'],\n                pathParams: ['advertiserId', 'targetingType', 'youtubeAdGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions = Resource$Advertisers$Youtubeadgroups$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Combinedaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/combinedAudiences/{+combinedAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['combinedAudienceId'],\n                pathParams: ['combinedAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/combinedAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Combinedaudiences = Resource$Combinedaudiences;\n    class Resource$Custombiddingalgorithms {\n        constructor(context) {\n            this.context = context;\n            this.scripts = new Resource$Custombiddingalgorithms$Scripts(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customBiddingAlgorithms').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        uploadScript(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}:uploadScript').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Custombiddingalgorithms = Resource$Custombiddingalgorithms;\n    class Resource$Custombiddingalgorithms$Scripts {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts/{+customBiddingScriptId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n                pathParams: ['customBiddingAlgorithmId', 'customBiddingScriptId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/customBiddingAlgorithms/{+customBiddingAlgorithmId}/scripts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customBiddingAlgorithmId'],\n                pathParams: ['customBiddingAlgorithmId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Custombiddingalgorithms$Scripts = Resource$Custombiddingalgorithms$Scripts;\n    class Resource$Customlists {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customLists/{+customListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['customListId'],\n                pathParams: ['customListId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/customLists').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Customlists = Resource$Customlists;\n    class Resource$Floodlightgroups {\n        constructor(context) {\n            this.context = context;\n            this.floodlightActivities =\n                new Resource$Floodlightgroups$Floodlightactivities(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/floodlightGroups/{+floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/floodlightGroups/{floodlightGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Floodlightgroups = Resource$Floodlightgroups;\n    class Resource$Floodlightgroups$Floodlightactivities {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/floodlightGroups/{+floodlightGroupId}/floodlightActivities/{+floodlightActivityId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId', 'floodlightActivityId'],\n                pathParams: ['floodlightActivityId', 'floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/floodlightGroups/{+floodlightGroupId}/floodlightActivities').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['floodlightGroupId'],\n                pathParams: ['floodlightGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Floodlightgroups$Floodlightactivities = Resource$Floodlightgroups$Floodlightactivities;\n    class Resource$Googleaudiences {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/googleAudiences/{+googleAudienceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['googleAudienceId'],\n                pathParams: ['googleAudienceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/googleAudiences').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Googleaudiences = Resource$Googleaudiences;\n    class Resource$Guaranteedorders {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editGuaranteedOrderReadAccessors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/guaranteedOrders/{+guaranteedOrderId}:editGuaranteedOrderReadAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/guaranteedOrders/{+guaranteedOrderId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['guaranteedOrderId'],\n                pathParams: ['guaranteedOrderId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Guaranteedorders = Resource$Guaranteedorders;\n    class Resource$Inventorysourcegroups {\n        constructor(context) {\n            this.context = context;\n            this.assignedInventorySources =\n                new Resource$Inventorysourcegroups$Assignedinventorysources(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{+inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySourceGroups/{inventorySourceGroupId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysourcegroups = Resource$Inventorysourcegroups;\n    class Resource$Inventorysourcegroups$Assignedinventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources/{+assignedInventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId', 'assignedInventorySourceId'],\n                pathParams: ['assignedInventorySourceId', 'inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySourceGroups/{+inventorySourceGroupId}/assignedInventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceGroupId'],\n                pathParams: ['inventorySourceGroupId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysourcegroups$Assignedinventorysources = Resource$Inventorysourcegroups$Assignedinventorysources;\n    class Resource$Inventorysources {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        editInventorySourceReadWriteAccessors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/inventorySources/{+inventorySourceId}:editInventorySourceReadWriteAccessors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/inventorySources/{+inventorySourceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['inventorySourceId'],\n                pathParams: ['inventorySourceId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Inventorysources = Resource$Inventorysources;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        download(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/download/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/media/{+resourceName}').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['resourceName'],\n                pathParams: ['resourceName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Media = Resource$Media;\n    class Resource$Partners {\n        constructor(context) {\n            this.context = context;\n            this.channels = new Resource$Partners$Channels(this.context);\n            this.targetingTypes = new Resource$Partners$Targetingtypes(this.context);\n        }\n        editAssignedTargetingOptions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}:editAssignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners = Resource$Partners;\n    class Resource$Partners$Channels {\n        constructor(context) {\n            this.context = context;\n            this.sites = new Resource$Partners$Channels$Sites(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId'],\n                pathParams: ['partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{channelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Channels = Resource$Partners$Channels;\n    class Resource$Partners$Channels$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEdit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites:bulkEdit').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites/{+urlOrAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId', 'urlOrAppId'],\n                pathParams: ['channelId', 'partnerId', 'urlOrAppId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/partners/{+partnerId}/channels/{+channelId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        replace(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{partnerId}/channels/{+channelId}/sites:replace').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'channelId'],\n                pathParams: ['channelId', 'partnerId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Channels$Sites = Resource$Partners$Channels$Sites;\n    class Resource$Partners$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.assignedTargetingOptions =\n                new Resource$Partners$Targetingtypes$Assignedtargetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Partners$Targetingtypes = Resource$Partners$Targetingtypes;\n    class Resource$Partners$Targetingtypes$Assignedtargetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions/{+assignedTargetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'partnerId',\n                    'targetingType',\n                    'assignedTargetingOptionId',\n                ],\n                pathParams: ['assignedTargetingOptionId', 'partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/partners/{+partnerId}/targetingTypes/{+targetingType}/assignedTargetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['partnerId', 'targetingType'],\n                pathParams: ['partnerId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Partners$Targetingtypes$Assignedtargetingoptions = Resource$Partners$Targetingtypes$Assignedtargetingoptions;\n    class Resource$Sdfdownloadtasks {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Sdfdownloadtasks$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/sdfdownloadtasks').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Sdfdownloadtasks = Resource$Sdfdownloadtasks;\n    class Resource$Sdfdownloadtasks$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Sdfdownloadtasks$Operations = Resource$Sdfdownloadtasks$Operations;\n    class Resource$Targetingtypes {\n        constructor(context) {\n            this.context = context;\n            this.targetingOptions = new Resource$Targetingtypes$Targetingoptions(this.context);\n        }\n    }\n    displayvideo_v2.Resource$Targetingtypes = Resource$Targetingtypes;\n    class Resource$Targetingtypes$Targetingoptions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/targetingTypes/{+targetingType}/targetingOptions/{+targetingOptionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['targetingType', 'targetingOptionId'],\n                pathParams: ['targetingOptionId', 'targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/targetingTypes/{+targetingType}/targetingOptions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/targetingTypes/{+targetingType}/targetingOptions:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['targetingType'],\n                pathParams: ['targetingType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Targetingtypes$Targetingoptions = Resource$Targetingtypes$Targetingoptions;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkEditAssignedUserRoles(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}:bulkEditAssignedUserRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://displayvideo.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/users/{+userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    displayvideo_v2.Resource$Users = Resource$Users;\n})(displayvideo_v2 || (exports.displayvideo_v2 = displayvideo_v2 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}