{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.storage_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar storage_v1;\n(function (storage_v1) {\n  /**\n   * Cloud Storage JSON API\n   *\n   * Stores and retrieves potentially large, immutable data objects.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const storage = google.storage('v1');\n   * ```\n   */\n  class Storage {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.anywhereCaches = new Resource$Anywherecaches(this.context);\n      this.bucketAccessControls = new Resource$Bucketaccesscontrols(this.context);\n      this.buckets = new Resource$Buckets(this.context);\n      this.channels = new Resource$Channels(this.context);\n      this.defaultObjectAccessControls = new Resource$Defaultobjectaccesscontrols(this.context);\n      this.folders = new Resource$Folders(this.context);\n      this.managedFolders = new Resource$Managedfolders(this.context);\n      this.notifications = new Resource$Notifications(this.context);\n      this.objectAccessControls = new Resource$Objectaccesscontrols(this.context);\n      this.objects = new Resource$Objects(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n  }\n  storage_v1.Storage = Storage;\n  class Resource$Anywherecaches {\n    constructor(context) {\n      this.context = context;\n    }\n    disable(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}/disable').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'anywhereCacheId'],\n        pathParams: ['anywhereCacheId', 'bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'anywhereCacheId'],\n        pathParams: ['anywhereCacheId', 'bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    pause(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}/pause').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'anywhereCacheId'],\n        pathParams: ['anywhereCacheId', 'bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'anywhereCacheId'],\n        pathParams: ['anywhereCacheId', 'bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'anywhereCacheId'],\n        pathParams: ['anywhereCacheId', 'bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Anywherecaches = Resource$Anywherecaches;\n  class Resource$Bucketaccesscontrols {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Bucketaccesscontrols = Resource$Bucketaccesscontrols;\n  class Resource$Buckets {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getStorageLayout(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/storageLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    lockRetentionPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/lockRetentionPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'ifMetagenerationMatch'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    relocate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/relocate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    restore(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/restore').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'generation'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'permissions'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Buckets = Resource$Buckets;\n  class Resource$Channels {\n    constructor(context) {\n      this.context = context;\n    }\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Channels = Resource$Channels;\n  class Resource$Defaultobjectaccesscontrols {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'entity'],\n        pathParams: ['bucket', 'entity'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Defaultobjectaccesscontrols = Resource$Defaultobjectaccesscontrols;\n  class Resource$Folders {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/folders/{folder}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'folder'],\n        pathParams: ['bucket', 'folder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/folders/{folder}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'folder'],\n        pathParams: ['bucket', 'folder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rename(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/folders/{sourceFolder}/renameTo/folders/{destinationFolder}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'sourceFolder', 'destinationFolder'],\n        pathParams: ['bucket', 'destinationFolder', 'sourceFolder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Folders = Resource$Folders;\n  class Resource$Managedfolders {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'managedFolder'],\n        pathParams: ['bucket', 'managedFolder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'managedFolder'],\n        pathParams: ['bucket', 'managedFolder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'managedFolder'],\n        pathParams: ['bucket', 'managedFolder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'managedFolder'],\n        pathParams: ['bucket', 'managedFolder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'managedFolder', 'permissions'],\n        pathParams: ['bucket', 'managedFolder'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Managedfolders = Resource$Managedfolders;\n  class Resource$Notifications {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'notification'],\n        pathParams: ['bucket', 'notification'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'notification'],\n        pathParams: ['bucket', 'notification'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Notifications = Resource$Notifications;\n  class Resource$Objectaccesscontrols {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'entity'],\n        pathParams: ['bucket', 'entity', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Objectaccesscontrols = Resource$Objectaccesscontrols;\n  class Resource$Objects {\n    constructor(context) {\n      this.context = context;\n    }\n    bulkRestore(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/bulkRestore').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    compose(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{destinationBucket}/o/{destinationObject}/compose').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['destinationBucket', 'destinationObject'],\n        pathParams: ['destinationBucket', 'destinationObject'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    copy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['sourceBucket', 'sourceObject', 'destinationBucket', 'destinationObject'],\n        pathParams: ['destinationBucket', 'destinationObject', 'sourceBucket', 'sourceObject'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{sourceObject}/moveTo/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'sourceObject', 'destinationObject'],\n        pathParams: ['bucket', 'destinationObject', 'sourceObject'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    restore(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/restore').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'generation'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rewrite(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['sourceBucket', 'sourceObject', 'destinationBucket', 'destinationObject'],\n        pathParams: ['destinationBucket', 'destinationObject', 'sourceBucket', 'sourceObject'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object', 'permissions'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'object'],\n        pathParams: ['bucket', 'object'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    watchAll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/o/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Objects = Resource$Objects;\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    advanceRelocateBucket(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/operations/{operationId}/advanceRelocateBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'operationId'],\n        pathParams: ['bucket', 'operationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/operations/{operationId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'operationId'],\n        pathParams: ['bucket', 'operationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/operations/{operationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket', 'operationId'],\n        pathParams: ['bucket', 'operationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/b/{bucket}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['bucket'],\n        pathParams: ['bucket'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Operations = Resource$Operations;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.hmacKeys = new Resource$Projects$Hmackeys(this.context);\n      this.serviceAccount = new Resource$Projects$Serviceaccount(this.context);\n    }\n  }\n  storage_v1.Resource$Projects = Resource$Projects;\n  class Resource$Projects$Hmackeys {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['projectId', 'serviceAccountEmail'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['projectId', 'accessId'],\n        pathParams: ['accessId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['projectId', 'accessId'],\n        pathParams: ['accessId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['projectId', 'accessId'],\n        pathParams: ['accessId', 'projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Projects$Hmackeys = Resource$Projects$Hmackeys;\n  class Resource$Projects$Serviceaccount {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/storage/v1/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  storage_v1.Resource$Projects$Serviceaccount = Resource$Projects$Serviceaccount;\n})(storage_v1 || (exports.storage_v1 = storage_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","storage_v1","googleapis_common_1","require","Storage","constructor","options","google","context","_options","anywhereCaches","Resource$Anywherecaches","bucketAccessControls","Resource$Bucketaccesscontrols","buckets","Resource$Buckets","channels","Resource$Channels","defaultObjectAccessControls","Resource$Defaultobjectaccesscontrols","folders","Resource$Folders","managedFolders","Resource$Managedfolders","notifications","Resource$Notifications","objectAccessControls","Resource$Objectaccesscontrols","objects","Resource$Objects","operations","Resource$Operations","projects","Resource$Projects","disable","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","apiVersion","requiredParams","pathParams","createAPIRequest","get","insert","list","pause","resume","update","delete","patch","getIamPolicy","getStorageLayout","lockRetentionPolicy","relocate","restore","setIamPolicy","testIamPermissions","stop","rename","bulkRestore","compose","copy","mediaUrl","move","rewrite","watchAll","advanceRelocateBucket","cancel","hmacKeys","Resource$Projects$Hmackeys","serviceAccount","Resource$Projects$Serviceaccount","create"],"sources":["C:/Users/citla/codebase/playingWithCursor/projects/javascript/node_modules/googleapis/build/src/apis/storage/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storage_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar storage_v1;\n(function (storage_v1) {\n    /**\n     * Cloud Storage JSON API\n     *\n     * Stores and retrieves potentially large, immutable data objects.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const storage = google.storage('v1');\n     * ```\n     */\n    class Storage {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.anywhereCaches = new Resource$Anywherecaches(this.context);\n            this.bucketAccessControls = new Resource$Bucketaccesscontrols(this.context);\n            this.buckets = new Resource$Buckets(this.context);\n            this.channels = new Resource$Channels(this.context);\n            this.defaultObjectAccessControls =\n                new Resource$Defaultobjectaccesscontrols(this.context);\n            this.folders = new Resource$Folders(this.context);\n            this.managedFolders = new Resource$Managedfolders(this.context);\n            this.notifications = new Resource$Notifications(this.context);\n            this.objectAccessControls = new Resource$Objectaccesscontrols(this.context);\n            this.objects = new Resource$Objects(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    storage_v1.Storage = Storage;\n    class Resource$Anywherecaches {\n        constructor(context) {\n            this.context = context;\n        }\n        disable(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}/disable').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'anywhereCacheId'],\n                pathParams: ['anywhereCacheId', 'bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'anywhereCacheId'],\n                pathParams: ['anywhereCacheId', 'bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/anywhereCaches').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        pause(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}/pause').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'anywhereCacheId'],\n                pathParams: ['anywhereCacheId', 'bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}/resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'anywhereCacheId'],\n                pathParams: ['anywhereCacheId', 'bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/anywhereCaches/{anywhereCacheId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'anywhereCacheId'],\n                pathParams: ['anywhereCacheId', 'bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Anywherecaches = Resource$Anywherecaches;\n    class Resource$Bucketaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Bucketaccesscontrols = Resource$Bucketaccesscontrols;\n    class Resource$Buckets {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getStorageLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/storageLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        lockRetentionPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/lockRetentionPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'ifMetagenerationMatch'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        relocate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/relocate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        restore(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/restore').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'generation'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'permissions'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Buckets = Resource$Buckets;\n    class Resource$Channels {\n        constructor(context) {\n            this.context = context;\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/channels/stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Channels = Resource$Channels;\n    class Resource$Defaultobjectaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/defaultObjectAcl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'entity'],\n                pathParams: ['bucket', 'entity'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Defaultobjectaccesscontrols = Resource$Defaultobjectaccesscontrols;\n    class Resource$Folders {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/folders/{folder}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'folder'],\n                pathParams: ['bucket', 'folder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/folders/{folder}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'folder'],\n                pathParams: ['bucket', 'folder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/folders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rename(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/folders/{sourceFolder}/renameTo/folders/{destinationFolder}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'sourceFolder', 'destinationFolder'],\n                pathParams: ['bucket', 'destinationFolder', 'sourceFolder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Folders = Resource$Folders;\n    class Resource$Managedfolders {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'managedFolder'],\n                pathParams: ['bucket', 'managedFolder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders/{managedFolder}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'managedFolder'],\n                pathParams: ['bucket', 'managedFolder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/managedFolders/{managedFolder}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'managedFolder'],\n                pathParams: ['bucket', 'managedFolder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/managedFolders').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/managedFolders/{managedFolder}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'managedFolder'],\n                pathParams: ['bucket', 'managedFolder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/managedFolders/{managedFolder}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'managedFolder', 'permissions'],\n                pathParams: ['bucket', 'managedFolder'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Managedfolders = Resource$Managedfolders;\n    class Resource$Notifications {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'notification'],\n                pathParams: ['bucket', 'notification'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/notificationConfigs/{notification}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'notification'],\n                pathParams: ['bucket', 'notification'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/notificationConfigs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Notifications = Resource$Notifications;\n    class Resource$Objectaccesscontrols {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/acl/{entity}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'entity'],\n                pathParams: ['bucket', 'entity', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Objectaccesscontrols = Resource$Objectaccesscontrols;\n    class Resource$Objects {\n        constructor(context) {\n            this.context = context;\n        }\n        bulkRestore(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/bulkRestore').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        compose(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{destinationBucket}/o/{destinationObject}/compose').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['destinationBucket', 'destinationObject'],\n                pathParams: ['destinationBucket', 'destinationObject'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'sourceBucket',\n                    'sourceObject',\n                    'destinationBucket',\n                    'destinationObject',\n                ],\n                pathParams: [\n                    'destinationBucket',\n                    'destinationObject',\n                    'sourceBucket',\n                    'sourceObject',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/o/{sourceObject}/moveTo/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'sourceObject', 'destinationObject'],\n                pathParams: ['bucket', 'destinationObject', 'sourceObject'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        restore(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/restore').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'generation'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rewrite(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [\n                    'sourceBucket',\n                    'sourceObject',\n                    'destinationBucket',\n                    'destinationObject',\n                ],\n                pathParams: [\n                    'destinationBucket',\n                    'destinationObject',\n                    'sourceBucket',\n                    'sourceObject',\n                ],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}/iam/testPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object', 'permissions'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/{object}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'object'],\n                pathParams: ['bucket', 'object'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        watchAll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/o/watch').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Objects = Resource$Objects;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        advanceRelocateBucket(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/storage/v1/b/{bucket}/operations/{operationId}/advanceRelocateBucket').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'operationId'],\n                pathParams: ['bucket', 'operationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/operations/{operationId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'operationId'],\n                pathParams: ['bucket', 'operationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/operations/{operationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket', 'operationId'],\n                pathParams: ['bucket', 'operationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/b/{bucket}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['bucket'],\n                pathParams: ['bucket'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Operations = Resource$Operations;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.hmacKeys = new Resource$Projects$Hmackeys(this.context);\n            this.serviceAccount = new Resource$Projects$Serviceaccount(this.context);\n        }\n    }\n    storage_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Hmackeys {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'serviceAccountEmail'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/hmacKeys/{accessId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['projectId', 'accessId'],\n                pathParams: ['accessId', 'projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Projects$Hmackeys = Resource$Projects$Hmackeys;\n    class Resource$Projects$Serviceaccount {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://storage.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/storage/v1/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    storage_v1.Resource$Projects$Serviceaccount = Resource$Projects$Serviceaccount;\n})(storage_v1 || (exports.storage_v1 = storage_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}