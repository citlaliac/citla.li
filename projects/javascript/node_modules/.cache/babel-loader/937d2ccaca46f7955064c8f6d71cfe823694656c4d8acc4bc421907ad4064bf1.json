{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.classroom_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar classroom_v1;\n(function (classroom_v1) {\n  /**\n   * Google Classroom API\n   *\n   * Manages classes, rosters, and invitations in Google Classroom.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const classroom = google.classroom('v1');\n   * ```\n   */\n  class Classroom {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.courses = new Resource$Courses(this.context);\n      this.invitations = new Resource$Invitations(this.context);\n      this.registrations = new Resource$Registrations(this.context);\n      this.userProfiles = new Resource$Userprofiles(this.context);\n    }\n  }\n  classroom_v1.Classroom = Classroom;\n  class Resource$Courses {\n    constructor(context) {\n      this.context = context;\n      this.aliases = new Resource$Courses$Aliases(this.context);\n      this.announcements = new Resource$Courses$Announcements(this.context);\n      this.courseWork = new Resource$Courses$Coursework(this.context);\n      this.courseWorkMaterials = new Resource$Courses$Courseworkmaterials(this.context);\n      this.posts = new Resource$Courses$Posts(this.context);\n      this.students = new Resource$Courses$Students(this.context);\n      this.teachers = new Resource$Courses$Teachers(this.context);\n      this.topics = new Resource$Courses$Topics(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses = Resource$Courses;\n  class Resource$Courses$Aliases {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'alias'],\n        pathParams: ['alias', 'courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Aliases = Resource$Courses$Aliases;\n  class Resource$Courses$Announcements {\n    constructor(context) {\n      this.context = context;\n      this.addOnAttachments = new Resource$Courses$Announcements$Addonattachments(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{itemId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    modifyAssignees(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}:modifyAssignees').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Announcements = Resource$Courses$Announcements;\n  class Resource$Courses$Announcements$Addonattachments {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Announcements$Addonattachments = Resource$Courses$Announcements$Addonattachments;\n  class Resource$Courses$Coursework {\n    constructor(context) {\n      this.context = context;\n      this.addOnAttachments = new Resource$Courses$Coursework$Addonattachments(this.context);\n      this.rubrics = new Resource$Courses$Coursework$Rubrics(this.context);\n      this.studentSubmissions = new Resource$Courses$Coursework$Studentsubmissions(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    modifyAssignees(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}:modifyAssignees').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateRubric(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubric').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId'],\n        pathParams: ['courseId', 'courseWorkId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Coursework = Resource$Courses$Coursework;\n  class Resource$Courses$Coursework$Addonattachments {\n    constructor(context) {\n      this.context = context;\n      this.studentSubmissions = new Resource$Courses$Coursework$Addonattachments$Studentsubmissions(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Coursework$Addonattachments = Resource$Courses$Coursework$Addonattachments;\n  class Resource$Courses$Coursework$Addonattachments$Studentsubmissions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId', 'submissionId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId', 'submissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId', 'submissionId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId', 'submissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Coursework$Addonattachments$Studentsubmissions = Resource$Courses$Coursework$Addonattachments$Studentsubmissions;\n  class Resource$Courses$Coursework$Rubrics {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId'],\n        pathParams: ['courseId', 'courseWorkId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId'],\n        pathParams: ['courseId', 'courseWorkId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Coursework$Rubrics = Resource$Courses$Coursework$Rubrics;\n  class Resource$Courses$Coursework$Studentsubmissions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId'],\n        pathParams: ['courseId', 'courseWorkId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    modifyAttachments(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reclaim(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    return(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    turnIn(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'courseWorkId', 'id'],\n        pathParams: ['courseId', 'courseWorkId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Coursework$Studentsubmissions = Resource$Courses$Coursework$Studentsubmissions;\n  class Resource$Courses$Courseworkmaterials {\n    constructor(context) {\n      this.context = context;\n      this.addOnAttachments = new Resource$Courses$Courseworkmaterials$Addonattachments(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Courseworkmaterials = Resource$Courses$Courseworkmaterials;\n  class Resource$Courses$Courseworkmaterials$Addonattachments {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId'],\n        pathParams: ['courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'itemId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'itemId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Courseworkmaterials$Addonattachments = Resource$Courses$Courseworkmaterials$Addonattachments;\n  class Resource$Courses$Posts {\n    constructor(context) {\n      this.context = context;\n      this.addOnAttachments = new Resource$Courses$Posts$Addonattachments(this.context);\n    }\n    getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId'],\n        pathParams: ['courseId', 'postId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Posts = Resource$Courses$Posts;\n  class Resource$Courses$Posts$Addonattachments {\n    constructor(context) {\n      this.context = context;\n      this.studentSubmissions = new Resource$Courses$Posts$Addonattachments$Studentsubmissions(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId'],\n        pathParams: ['courseId', 'postId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'postId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'postId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId'],\n        pathParams: ['courseId', 'postId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId', 'attachmentId'],\n        pathParams: ['attachmentId', 'courseId', 'postId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Posts$Addonattachments = Resource$Courses$Posts$Addonattachments;\n  class Resource$Courses$Posts$Addonattachments$Studentsubmissions {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId', 'attachmentId', 'submissionId'],\n        pathParams: ['attachmentId', 'courseId', 'postId', 'submissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'postId', 'attachmentId', 'submissionId'],\n        pathParams: ['attachmentId', 'courseId', 'postId', 'submissionId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Posts$Addonattachments$Studentsubmissions = Resource$Courses$Posts$Addonattachments$Studentsubmissions;\n  class Resource$Courses$Students {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/students').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/students/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'userId'],\n        pathParams: ['courseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/students/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'userId'],\n        pathParams: ['courseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/students').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Students = Resource$Courses$Students;\n  class Resource$Courses$Teachers {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/teachers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'userId'],\n        pathParams: ['courseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'userId'],\n        pathParams: ['courseId', 'userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/teachers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Teachers = Resource$Courses$Teachers;\n  class Resource$Courses$Topics {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/topics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/topics').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId'],\n        pathParams: ['courseId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['courseId', 'id'],\n        pathParams: ['courseId', 'id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Courses$Topics = Resource$Courses$Topics;\n  class Resource$Invitations {\n    constructor(context) {\n      this.context = context;\n    }\n    accept(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations/{id}:accept').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['id'],\n        pathParams: ['id'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Invitations = Resource$Invitations;\n  class Resource$Registrations {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/registrations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/registrations/{registrationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['registrationId'],\n        pathParams: ['registrationId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Registrations = Resource$Registrations;\n  class Resource$Userprofiles {\n    constructor(context) {\n      this.context = context;\n      this.guardianInvitations = new Resource$Userprofiles$Guardianinvitations(this.context);\n      this.guardians = new Resource$Userprofiles$Guardians(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['userId'],\n        pathParams: ['userId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Userprofiles = Resource$Userprofiles;\n  class Resource$Userprofiles$Guardianinvitations {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId'],\n        pathParams: ['studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId', 'invitationId'],\n        pathParams: ['invitationId', 'studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId'],\n        pathParams: ['studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId', 'invitationId'],\n        pathParams: ['invitationId', 'studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Userprofiles$Guardianinvitations = Resource$Userprofiles$Guardianinvitations;\n  class Resource$Userprofiles$Guardians {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardians/{guardianId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId', 'guardianId'],\n        pathParams: ['guardianId', 'studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardians/{guardianId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId', 'guardianId'],\n        pathParams: ['guardianId', 'studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/userProfiles/{studentId}/guardians').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['studentId'],\n        pathParams: ['studentId'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  classroom_v1.Resource$Userprofiles$Guardians = Resource$Userprofiles$Guardians;\n})(classroom_v1 || (exports.classroom_v1 = classroom_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","classroom_v1","googleapis_common_1","require","Classroom","constructor","options","google","context","_options","courses","Resource$Courses","invitations","Resource$Invitations","registrations","Resource$Registrations","userProfiles","Resource$Userprofiles","aliases","Resource$Courses$Aliases","announcements","Resource$Courses$Announcements","courseWork","Resource$Courses$Coursework","courseWorkMaterials","Resource$Courses$Courseworkmaterials","posts","Resource$Courses$Posts","students","Resource$Courses$Students","teachers","Resource$Courses$Teachers","topics","Resource$Courses$Topics","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","apiVersion","requiredParams","pathParams","createAPIRequest","delete","get","list","patch","update","addOnAttachments","Resource$Courses$Announcements$Addonattachments","getAddOnContext","modifyAssignees","Resource$Courses$Coursework$Addonattachments","rubrics","Resource$Courses$Coursework$Rubrics","studentSubmissions","Resource$Courses$Coursework$Studentsubmissions","updateRubric","Resource$Courses$Coursework$Addonattachments$Studentsubmissions","modifyAttachments","reclaim","return","turnIn","Resource$Courses$Courseworkmaterials$Addonattachments","Resource$Courses$Posts$Addonattachments","Resource$Courses$Posts$Addonattachments$Studentsubmissions","accept","guardianInvitations","Resource$Userprofiles$Guardianinvitations","guardians","Resource$Userprofiles$Guardians"],"sources":["C:/Users/citla/codebase/playingWithCursor/projects/javascript/node_modules/googleapis/build/src/apis/classroom/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.classroom_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar classroom_v1;\n(function (classroom_v1) {\n    /**\n     * Google Classroom API\n     *\n     * Manages classes, rosters, and invitations in Google Classroom.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const classroom = google.classroom('v1');\n     * ```\n     */\n    class Classroom {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.courses = new Resource$Courses(this.context);\n            this.invitations = new Resource$Invitations(this.context);\n            this.registrations = new Resource$Registrations(this.context);\n            this.userProfiles = new Resource$Userprofiles(this.context);\n        }\n    }\n    classroom_v1.Classroom = Classroom;\n    class Resource$Courses {\n        constructor(context) {\n            this.context = context;\n            this.aliases = new Resource$Courses$Aliases(this.context);\n            this.announcements = new Resource$Courses$Announcements(this.context);\n            this.courseWork = new Resource$Courses$Coursework(this.context);\n            this.courseWorkMaterials = new Resource$Courses$Courseworkmaterials(this.context);\n            this.posts = new Resource$Courses$Posts(this.context);\n            this.students = new Resource$Courses$Students(this.context);\n            this.teachers = new Resource$Courses$Teachers(this.context);\n            this.topics = new Resource$Courses$Topics(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses = Resource$Courses;\n    class Resource$Courses$Aliases {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/aliases/{alias}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'alias'],\n                pathParams: ['alias', 'courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/aliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Aliases = Resource$Courses$Aliases;\n    class Resource$Courses$Announcements {\n        constructor(context) {\n            this.context = context;\n            this.addOnAttachments =\n                new Resource$Courses$Announcements$Addonattachments(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/announcements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{itemId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/announcements').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        modifyAssignees(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{id}:modifyAssignees').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/announcements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Announcements = Resource$Courses$Announcements;\n    class Resource$Courses$Announcements$Addonattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/announcements/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Announcements$Addonattachments = Resource$Courses$Announcements$Addonattachments;\n    class Resource$Courses$Coursework {\n        constructor(context) {\n            this.context = context;\n            this.addOnAttachments = new Resource$Courses$Coursework$Addonattachments(this.context);\n            this.rubrics = new Resource$Courses$Coursework$Rubrics(this.context);\n            this.studentSubmissions =\n                new Resource$Courses$Coursework$Studentsubmissions(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWork').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWork').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        modifyAssignees(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}:modifyAssignees').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWork/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateRubric(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubric').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId'],\n                pathParams: ['courseId', 'courseWorkId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Coursework = Resource$Courses$Coursework;\n    class Resource$Courses$Coursework$Addonattachments {\n        constructor(context) {\n            this.context = context;\n            this.studentSubmissions =\n                new Resource$Courses$Coursework$Addonattachments$Studentsubmissions(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Coursework$Addonattachments = Resource$Courses$Coursework$Addonattachments;\n    class Resource$Courses$Coursework$Addonattachments$Studentsubmissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId', 'submissionId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId', 'submissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{itemId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId', 'submissionId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId', 'submissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Coursework$Addonattachments$Studentsubmissions = Resource$Courses$Coursework$Addonattachments$Studentsubmissions;\n    class Resource$Courses$Coursework$Rubrics {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId'],\n                pathParams: ['courseId', 'courseWorkId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId'],\n                pathParams: ['courseId', 'courseWorkId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/rubrics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Coursework$Rubrics = Resource$Courses$Coursework$Rubrics;\n    class Resource$Courses$Coursework$Studentsubmissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId'],\n                pathParams: ['courseId', 'courseWorkId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        modifyAttachments(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reclaim(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        return(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        turnIn(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'courseWorkId', 'id'],\n                pathParams: ['courseId', 'courseWorkId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Coursework$Studentsubmissions = Resource$Courses$Coursework$Studentsubmissions;\n    class Resource$Courses$Courseworkmaterials {\n        constructor(context) {\n            this.context = context;\n            this.addOnAttachments =\n                new Resource$Courses$Courseworkmaterials$Addonattachments(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/courseWorkMaterials/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Courseworkmaterials = Resource$Courses$Courseworkmaterials;\n    class Resource$Courses$Courseworkmaterials$Addonattachments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId'],\n                pathParams: ['courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/courseWorkMaterials/{itemId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'itemId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'itemId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Courseworkmaterials$Addonattachments = Resource$Courses$Courseworkmaterials$Addonattachments;\n    class Resource$Courses$Posts {\n        constructor(context) {\n            this.context = context;\n            this.addOnAttachments = new Resource$Courses$Posts$Addonattachments(this.context);\n        }\n        getAddOnContext(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnContext').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId'],\n                pathParams: ['courseId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Posts = Resource$Courses$Posts;\n    class Resource$Courses$Posts$Addonattachments {\n        constructor(context) {\n            this.context = context;\n            this.studentSubmissions =\n                new Resource$Courses$Posts$Addonattachments$Studentsubmissions(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId'],\n                pathParams: ['courseId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/posts/{postId}/addOnAttachments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId'],\n                pathParams: ['courseId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId', 'attachmentId'],\n                pathParams: ['attachmentId', 'courseId', 'postId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Posts$Addonattachments = Resource$Courses$Posts$Addonattachments;\n    class Resource$Courses$Posts$Addonattachments$Studentsubmissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId', 'attachmentId', 'submissionId'],\n                pathParams: ['attachmentId', 'courseId', 'postId', 'submissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/courses/{courseId}/posts/{postId}/addOnAttachments/{attachmentId}/studentSubmissions/{submissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'postId', 'attachmentId', 'submissionId'],\n                pathParams: ['attachmentId', 'courseId', 'postId', 'submissionId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Posts$Addonattachments$Studentsubmissions = Resource$Courses$Posts$Addonattachments$Studentsubmissions;\n    class Resource$Courses$Students {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/students').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/students/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'userId'],\n                pathParams: ['courseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/students/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'userId'],\n                pathParams: ['courseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/students').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Students = Resource$Courses$Students;\n    class Resource$Courses$Teachers {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/teachers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'userId'],\n                pathParams: ['courseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/teachers/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'userId'],\n                pathParams: ['courseId', 'userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/teachers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Teachers = Resource$Courses$Teachers;\n    class Resource$Courses$Topics {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/topics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/topics').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId'],\n                pathParams: ['courseId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/courses/{courseId}/topics/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['courseId', 'id'],\n                pathParams: ['courseId', 'id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Courses$Topics = Resource$Courses$Topics;\n    class Resource$Invitations {\n        constructor(context) {\n            this.context = context;\n        }\n        accept(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/invitations/{id}:accept').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/invitations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/invitations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['id'],\n                pathParams: ['id'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/invitations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Invitations = Resource$Invitations;\n    class Resource$Registrations {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/registrations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/registrations/{registrationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['registrationId'],\n                pathParams: ['registrationId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Registrations = Resource$Registrations;\n    class Resource$Userprofiles {\n        constructor(context) {\n            this.context = context;\n            this.guardianInvitations = new Resource$Userprofiles$Guardianinvitations(this.context);\n            this.guardians = new Resource$Userprofiles$Guardians(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/userProfiles/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['userId'],\n                pathParams: ['userId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Userprofiles = Resource$Userprofiles;\n    class Resource$Userprofiles$Guardianinvitations {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId'],\n                pathParams: ['studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId', 'invitationId'],\n                pathParams: ['invitationId', 'studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/userProfiles/{studentId}/guardianInvitations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId'],\n                pathParams: ['studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/userProfiles/{studentId}/guardianInvitations/{invitationId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId', 'invitationId'],\n                pathParams: ['invitationId', 'studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Userprofiles$Guardianinvitations = Resource$Userprofiles$Guardianinvitations;\n    class Resource$Userprofiles$Guardians {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/userProfiles/{studentId}/guardians/{guardianId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId', 'guardianId'],\n                pathParams: ['guardianId', 'studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/userProfiles/{studentId}/guardians/{guardianId}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId', 'guardianId'],\n                pathParams: ['guardianId', 'studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://classroom.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/userProfiles/{studentId}/guardians').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['studentId'],\n                pathParams: ['studentId'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    classroom_v1.Resource$Userprofiles$Guardians = Resource$Userprofiles$Guardians;\n})(classroom_v1 || (exports.classroom_v1 = classroom_v1 = {}));\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AACxD,IAAIF,YAAY;AAChB,CAAC,UAAUA,YAAY,EAAE;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,SAAS,CAAC;IACZC,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAE;MACzB,IAAI,CAACC,OAAO,GAAG;QACXC,QAAQ,EAAEH,OAAO,IAAI,CAAC,CAAC;QACvBC;MACJ,CAAC;MACD,IAAI,CAACG,OAAO,GAAG,IAAIC,gBAAgB,CAAC,IAAI,CAACH,OAAO,CAAC;MACjD,IAAI,CAACI,WAAW,GAAG,IAAIC,oBAAoB,CAAC,IAAI,CAACL,OAAO,CAAC;MACzD,IAAI,CAACM,aAAa,GAAG,IAAIC,sBAAsB,CAAC,IAAI,CAACP,OAAO,CAAC;MAC7D,IAAI,CAACQ,YAAY,GAAG,IAAIC,qBAAqB,CAAC,IAAI,CAACT,OAAO,CAAC;IAC/D;EACJ;EACAP,YAAY,CAACG,SAAS,GAAGA,SAAS;EAClC,MAAMO,gBAAgB,CAAC;IACnBN,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACU,OAAO,GAAG,IAAIC,wBAAwB,CAAC,IAAI,CAACX,OAAO,CAAC;MACzD,IAAI,CAACY,aAAa,GAAG,IAAIC,8BAA8B,CAAC,IAAI,CAACb,OAAO,CAAC;MACrE,IAAI,CAACc,UAAU,GAAG,IAAIC,2BAA2B,CAAC,IAAI,CAACf,OAAO,CAAC;MAC/D,IAAI,CAACgB,mBAAmB,GAAG,IAAIC,oCAAoC,CAAC,IAAI,CAACjB,OAAO,CAAC;MACjF,IAAI,CAACkB,KAAK,GAAG,IAAIC,sBAAsB,CAAC,IAAI,CAACnB,OAAO,CAAC;MACrD,IAAI,CAACoB,QAAQ,GAAG,IAAIC,yBAAyB,CAAC,IAAI,CAACrB,OAAO,CAAC;MAC3D,IAAI,CAACsB,QAAQ,GAAG,IAAIC,yBAAyB,CAAC,IAAI,CAACvB,OAAO,CAAC;MAC3D,IAAI,CAACwB,MAAM,GAAG,IAAIC,uBAAuB,CAAC,IAAI,CAACzB,OAAO,CAAC;IAC3D;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,aAAa,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5DC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAkB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjEC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAkB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjEC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,aAAa,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5DC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAkB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjEC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAa,MAAMA,CAAClB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kBAAkB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjEC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACU,gBAAgB,GAAGA,gBAAgB;EAChD,MAAMQ,wBAAwB,CAAC;IAC3Bd,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gCAAgC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/EC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,OAAO,CAAC;QACrCC,UAAU,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;QACjCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,gCAAgC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/EC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACkB,wBAAwB,GAAGA,wBAAwB;EAChE,MAAME,8BAA8B,CAAC;IACjChB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAAC8C,gBAAgB,GACjB,IAAIC,+CAA+C,CAAC,IAAI,CAAC/C,OAAO,CAAC;IACzE;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sCAAsC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrFC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAA2C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1FC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAA2C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1FC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAgB,eAAeA,CAACrB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4DAA4D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/FC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sCAAsC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAiB,eAAeA,CAACtB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,2DAA2D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9FC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2CAA2C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1FC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACoB,8BAA8B,GAAGA,8BAA8B;EAC5E,MAAMkC,+CAA+C,CAAC;IAClDlD,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,gEAAgE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnGC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+EAA+E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClHC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+EAA+E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClHC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,gEAAgE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+EAA+E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClHC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACsD,+CAA+C,GAAGA,+CAA+C;EAC9G,MAAMhC,2BAA2B,CAAC;IAC9BlB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAAC8C,gBAAgB,GAAG,IAAII,4CAA4C,CAAC,IAAI,CAAClD,OAAO,CAAC;MACtF,IAAI,CAACmD,OAAO,GAAG,IAAIC,mCAAmC,CAAC,IAAI,CAACpD,OAAO,CAAC;MACpE,IAAI,CAACqD,kBAAkB,GACnB,IAAIC,8CAA8C,CAAC,IAAI,CAACtD,OAAO,CAAC;IACxE;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mCAAmC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClFC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAgB,eAAeA,CAACrB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDAAyD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5FC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mCAAmC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAiB,eAAeA,CAACtB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wDAAwD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvGC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAuB,YAAYA,CAAC5B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACxD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yDAAyD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5FC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QAC5CC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QACxCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACsB,2BAA2B,GAAGA,2BAA2B;EACtE,MAAMmC,4CAA4C,CAAC;IAC/CrD,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACqD,kBAAkB,GACnB,IAAIG,+DAA+D,CAAC,IAAI,CAACxD,OAAO,CAAC;IACzF;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6DAA6D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChGC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4EAA4E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/GC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4EAA4E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/GC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,6DAA6D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4EAA4E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/GC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACyD,4CAA4C,GAAGA,4CAA4C;EACxG,MAAMM,+DAA+D,CAAC;IAClE3D,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0C,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8GAA8G,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjJC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;QACtEC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QAClEvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,8GAA8G,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjJC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;QACtEC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QAClEvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC+D,+DAA+D,GAAGA,+DAA+D;EAC9I,MAAMJ,mCAAmC,CAAC;IACtCvD,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0DAA0D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC7FC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QAC5CC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QACxCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+DAA+D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClGC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+DAA+D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0DAA0D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC7FC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QAC5CC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QACxCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,+DAA+D,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClGC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC2D,mCAAmC,GAAGA,mCAAmC;EACtF,MAAME,8CAA8C,CAAC;IACjDzD,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0C,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0EAA0E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC7GC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qEAAqE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACxGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QAC5CC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC;QACxCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAyB,iBAAiBA,CAAC9B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC7D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,4FAA4F,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC/HC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,0EAA0E,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC7GC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACA0B,OAAOA,CAAC/B,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACnD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,kFAAkF,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrHC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACA2B,MAAMA,CAAChC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iFAAiF,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpHC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACA4B,MAAMA,CAACjC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iFAAiF,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpHC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAClDC,UAAU,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,IAAI,CAAC;QAC9CvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC6D,8CAA8C,GAAGA,8CAA8C;EAC5G,MAAMrC,oCAAoC,CAAC;IACvCpB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAAC8C,gBAAgB,GACjB,IAAIe,qDAAqD,CAAC,IAAI,CAAC7D,OAAO,CAAC;IAC/E;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,4CAA4C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC3FC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAiD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChGC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAiD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAgB,eAAeA,CAACrB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,kEAAkE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,4CAA4C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC3FC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAiD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChGC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACwB,oCAAoC,GAAGA,oCAAoC;EACxF,MAAM4C,qDAAqD,CAAC;IACxDhE,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,sEAAsE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzGC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qFAAqF,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACxHC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qFAAqF,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACxHC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,sEAAsE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,qFAAqF,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACxHC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACoE,qDAAqD,GAAGA,qDAAqD;EAC1H,MAAM1C,sBAAsB,CAAC;IACzBtB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAAC8C,gBAAgB,GAAG,IAAIgB,uCAAuC,CAAC,IAAI,CAAC9D,OAAO,CAAC;IACrF;IACAgD,eAAeA,CAACrB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC3D,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oDAAoD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC0B,sBAAsB,GAAGA,sBAAsB;EAC5D,MAAM2C,uCAAuC,CAAC;IAC1CjE,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACqD,kBAAkB,GACnB,IAAIU,0DAA0D,CAAC,IAAI,CAAC/D,OAAO,CAAC;IACpF;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wDAAwD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvGC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uEAAuE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1GC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uEAAuE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1GC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wDAAwD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,uEAAuE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1GC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QACtDC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,CAAC;QAClDvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACqE,uCAAuC,GAAGA,uCAAuC;EAC9F,MAAMC,0DAA0D,CAAC;IAC7DlE,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0C,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yGAAyG,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5IC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;QACtEC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QAClEvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GACF,CAAC,CAAC;QACNhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,yGAAyG,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5IC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;QACtEC,UAAU,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc,CAAC;QAClEvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACsE,0DAA0D,GAAGA,0DAA0D;EACpI,MAAM1C,yBAAyB,CAAC;IAC5BxB,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAiC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChFC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAA0C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzFC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAA0C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAiC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC4B,yBAAyB,GAAGA,yBAAyB;EAClE,MAAME,yBAAyB,CAAC;IAC5B1B,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAiC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChFC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAA0C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzFC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,0CAA0C,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACzFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QACtCC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,CAAC;QAClCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAiC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC8B,yBAAyB,GAAGA,yBAAyB;EAClE,MAAME,uBAAuB,CAAC;IAC1B5B,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+BAA+B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9EC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAoC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnFC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAoC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,+BAA+B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC9EC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,CAAC;QAC5BC,UAAU,EAAE,CAAC,UAAU,CAAC;QACxBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAoC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnFC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAClCC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACgC,uBAAuB,GAAGA,uBAAuB;EAC9D,MAAMpB,oBAAoB,CAAC;IACvBR,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACAgE,MAAMA,CAACrC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,6BAA6B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC5EC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAN,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAiB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChEC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAsB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrEC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,sBAAsB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACrEC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,IAAI,CAAC;QACtBC,UAAU,EAAE,CAAC,IAAI,CAAC;QAClBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,iBAAiB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAChEC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACY,oBAAoB,GAAGA,oBAAoB;EACxD,MAAME,sBAAsB,CAAC;IACzBV,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,mBAAmB,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAClEC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE,EAAE;QACdvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAS,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,oCAAoC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACnFC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,gBAAgB,CAAC;QAClCC,UAAU,EAAE,CAAC,gBAAgB,CAAC;QAC9BvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACc,sBAAsB,GAAGA,sBAAsB;EAC5D,MAAME,qBAAqB,CAAC;IACxBZ,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;MACtB,IAAI,CAACiE,mBAAmB,GAAG,IAAIC,yCAAyC,CAAC,IAAI,CAAClE,OAAO,CAAC;MACtF,IAAI,CAACmE,SAAS,GAAG,IAAIC,+BAA+B,CAAC,IAAI,CAACpE,OAAO,CAAC;IACtE;IACA0C,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAAI,CAAC,CAAE;MACrC,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,2BAA2B,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UAC1EC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,QAAQ,CAAC;QAC1BC,UAAU,EAAE,CAAC,QAAQ,CAAC;QACtBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACgB,qBAAqB,GAAGA,qBAAqB;EAC1D,MAAMyD,yCAAyC,CAAC;IAC5CrE,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACA0B,MAAMA,CAACC,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kDAAkD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjGC,MAAM,EAAE,MAAM;UACdC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,CAAC;QAC7BC,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEAAiE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,EAAE,cAAc,CAAC;QAC7CC,UAAU,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC;QACzCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,kDAAkD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACjGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,CAAC;QAC7BC,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAY,KAAKA,CAACjB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MACjD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GACT,iEAAiE,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpGC,MAAM,EAAE,OAAO;UACfC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,EAAE,cAAc,CAAC;QAC7CC,UAAU,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC;QACzCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAACyE,yCAAyC,GAAGA,yCAAyC;EAClG,MAAME,+BAA+B,CAAC;IAClCvE,WAAWA,CAACG,OAAO,EAAE;MACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;IAC1B;IACAyC,MAAMA,CAACd,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAClD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qDAAqD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpGC,MAAM,EAAE,QAAQ;UAChBC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QAC3CC,UAAU,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC;QACvCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAU,GAAGA,CAACf,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAC/C,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,qDAAqD,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACpGC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;QAC3CC,UAAU,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC;QACvCvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;IACAW,IAAIA,CAAChB,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAE;MAChD,IAAIC,MAAM,GAAIH,gBAAgB,IAC1B,CAAC,CAAE;MACP,IAAI7B,OAAO,GAAI8B,iBAAiB,IAAI,CAAC,CAAE;MACvC,IAAI,OAAOD,gBAAgB,KAAK,UAAU,EAAE;QACxCE,QAAQ,GAAGF,gBAAgB;QAC3BG,MAAM,GAAG,CAAC,CAAC;QACXhC,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,IAAI,OAAO8B,iBAAiB,KAAK,UAAU,EAAE;QACzCC,QAAQ,GAAGD,iBAAiB;QAC5B9B,OAAO,GAAG,CAAC,CAAC;MAChB;MACA,MAAMiC,OAAO,GAAGjC,OAAO,CAACiC,OAAO,IAAI,mCAAmC;MACtE,MAAMC,UAAU,GAAG;QACflC,OAAO,EAAET,MAAM,CAAC4C,MAAM,CAAC;UACnBC,GAAG,EAAE,CAACH,OAAO,GAAG,wCAAwC,EAAEI,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC;UACvFC,MAAM,EAAE,KAAK;UACbC,UAAU,EAAE;QAChB,CAAC,EAAEvC,OAAO,CAAC;QACXgC,MAAM;QACNQ,cAAc,EAAE,CAAC,WAAW,CAAC;QAC7BC,UAAU,EAAE,CAAC,WAAW,CAAC;QACzBvC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC;MACD,IAAI6B,QAAQ,EAAE;QACV,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,EAAEH,QAAQ,CAAC;MACnE,CAAC,MACI;QACD,OAAO,CAAC,CAAC,EAAEnC,mBAAmB,CAAC8C,gBAAgB,EAAER,UAAU,CAAC;MAChE;IACJ;EACJ;EACAvC,YAAY,CAAC2E,+BAA+B,GAAGA,+BAA+B;AAClF,CAAC,EAAE3E,YAAY,KAAKF,OAAO,CAACE,YAAY,GAAGA,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}