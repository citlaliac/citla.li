{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.aiplatform_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar aiplatform_v1;\n(function (aiplatform_v1) {\n  /**\n   * Vertex AI API\n   *\n   * Train high-quality custom machine learning models with minimal machine learning expertise and effort.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const aiplatform = google.aiplatform('v1');\n   * ```\n   */\n  class Aiplatform {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.datasets = new Resource$Datasets(this.context);\n      this.endpoints = new Resource$Endpoints(this.context);\n      this.media = new Resource$Media(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.publishers = new Resource$Publishers(this.context);\n    }\n  }\n  aiplatform_v1.Aiplatform = Aiplatform;\n  class Resource$Datasets {\n    constructor(context) {\n      this.context = context;\n      this.datasetVersions = new Resource$Datasets$Datasetversions(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Datasets = Resource$Datasets;\n  class Resource$Datasets$Datasetversions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    restore(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Datasets$Datasetversions = Resource$Datasets$Datasetversions;\n  class Resource$Endpoints {\n    constructor(context) {\n      this.context = context;\n    }\n    computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    countTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    predict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Endpoints = Resource$Endpoints;\n  class Resource$Media {\n    constructor(context) {\n      this.context = context;\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/ragFiles:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/v1/{+parent}/ragFiles:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Media = Resource$Media;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Projects$Locations(this.context);\n    }\n    getCacheConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateCacheConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects = Resource$Projects;\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.batchPredictionJobs = new Resource$Projects$Locations$Batchpredictionjobs(this.context);\n      this.cachedContents = new Resource$Projects$Locations$Cachedcontents(this.context);\n      this.customJobs = new Resource$Projects$Locations$Customjobs(this.context);\n      this.dataLabelingJobs = new Resource$Projects$Locations$Datalabelingjobs(this.context);\n      this.datasets = new Resource$Projects$Locations$Datasets(this.context);\n      this.deploymentResourcePools = new Resource$Projects$Locations$Deploymentresourcepools(this.context);\n      this.endpoints = new Resource$Projects$Locations$Endpoints(this.context);\n      this.featureGroups = new Resource$Projects$Locations$Featuregroups(this.context);\n      this.featureOnlineStores = new Resource$Projects$Locations$Featureonlinestores(this.context);\n      this.featurestores = new Resource$Projects$Locations$Featurestores(this.context);\n      this.hyperparameterTuningJobs = new Resource$Projects$Locations$Hyperparametertuningjobs(this.context);\n      this.indexEndpoints = new Resource$Projects$Locations$Indexendpoints(this.context);\n      this.indexes = new Resource$Projects$Locations$Indexes(this.context);\n      this.metadataStores = new Resource$Projects$Locations$Metadatastores(this.context);\n      this.migratableResources = new Resource$Projects$Locations$Migratableresources(this.context);\n      this.modelDeploymentMonitoringJobs = new Resource$Projects$Locations$Modeldeploymentmonitoringjobs(this.context);\n      this.models = new Resource$Projects$Locations$Models(this.context);\n      this.nasJobs = new Resource$Projects$Locations$Nasjobs(this.context);\n      this.notebookExecutionJobs = new Resource$Projects$Locations$Notebookexecutionjobs(this.context);\n      this.notebookRuntimes = new Resource$Projects$Locations$Notebookruntimes(this.context);\n      this.notebookRuntimeTemplates = new Resource$Projects$Locations$Notebookruntimetemplates(this.context);\n      this.operations = new Resource$Projects$Locations$Operations(this.context);\n      this.persistentResources = new Resource$Projects$Locations$Persistentresources(this.context);\n      this.pipelineJobs = new Resource$Projects$Locations$Pipelinejobs(this.context);\n      this.publishers = new Resource$Projects$Locations$Publishers(this.context);\n      this.ragCorpora = new Resource$Projects$Locations$Ragcorpora(this.context);\n      this.reasoningEngines = new Resource$Projects$Locations$Reasoningengines(this.context);\n      this.schedules = new Resource$Projects$Locations$Schedules(this.context);\n      this.specialistPools = new Resource$Projects$Locations$Specialistpools(this.context);\n      this.studies = new Resource$Projects$Locations$Studies(this.context);\n      this.tensorboards = new Resource$Projects$Locations$Tensorboards(this.context);\n      this.trainingPipelines = new Resource$Projects$Locations$Trainingpipelines(this.context);\n      this.tuningJobs = new Resource$Projects$Locations$Tuningjobs(this.context);\n    }\n    augmentPrompt(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}:augmentPrompt').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    corroborateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}:corroborateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    evaluateDataset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+location}:evaluateDataset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['location'],\n        pathParams: ['location'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    evaluateInstances(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+location}:evaluateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['location'],\n        pathParams: ['location'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    retrieveContexts(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}:retrieveContexts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n  class Resource$Projects$Locations$Batchpredictionjobs {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/batchPredictionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/batchPredictionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Batchpredictionjobs = Resource$Projects$Locations$Batchpredictionjobs;\n  class Resource$Projects$Locations$Cachedcontents {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/cachedContents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/cachedContents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Cachedcontents = Resource$Projects$Locations$Cachedcontents;\n  class Resource$Projects$Locations$Customjobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Customjobs$Operations(this.context);\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/customJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/customJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Customjobs = Resource$Projects$Locations$Customjobs;\n  class Resource$Projects$Locations$Customjobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Customjobs$Operations = Resource$Projects$Locations$Customjobs$Operations;\n  class Resource$Projects$Locations$Datalabelingjobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Datalabelingjobs$Operations(this.context);\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/dataLabelingJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/dataLabelingJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datalabelingjobs = Resource$Projects$Locations$Datalabelingjobs;\n  class Resource$Projects$Locations$Datalabelingjobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datalabelingjobs$Operations = Resource$Projects$Locations$Datalabelingjobs$Operations;\n  class Resource$Projects$Locations$Datasets {\n    constructor(context) {\n      this.context = context;\n      this.annotationSpecs = new Resource$Projects$Locations$Datasets$Annotationspecs(this.context);\n      this.dataItems = new Resource$Projects$Locations$Datasets$Dataitems(this.context);\n      this.datasetVersions = new Resource$Projects$Locations$Datasets$Datasetversions(this.context);\n      this.operations = new Resource$Projects$Locations$Datasets$Operations(this.context);\n      this.savedQueries = new Resource$Projects$Locations$Datasets$Savedqueries(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    searchDataItems(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+dataset}:searchDataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['dataset'],\n        pathParams: ['dataset'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets = Resource$Projects$Locations$Datasets;\n  class Resource$Projects$Locations$Datasets$Annotationspecs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Datasets$Annotationspecs$Operations(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Annotationspecs = Resource$Projects$Locations$Datasets$Annotationspecs;\n  class Resource$Projects$Locations$Datasets$Annotationspecs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Annotationspecs$Operations = Resource$Projects$Locations$Datasets$Annotationspecs$Operations;\n  class Resource$Projects$Locations$Datasets$Dataitems {\n    constructor(context) {\n      this.context = context;\n      this.annotations = new Resource$Projects$Locations$Datasets$Dataitems$Annotations(this.context);\n      this.operations = new Resource$Projects$Locations$Datasets$Dataitems$Operations(this.context);\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/dataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems = Resource$Projects$Locations$Datasets$Dataitems;\n  class Resource$Projects$Locations$Datasets$Dataitems$Annotations {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations(this.context);\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems$Annotations = Resource$Projects$Locations$Datasets$Dataitems$Annotations;\n  class Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations = Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations;\n  class Resource$Projects$Locations$Datasets$Dataitems$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems$Operations = Resource$Projects$Locations$Datasets$Dataitems$Operations;\n  class Resource$Projects$Locations$Datasets$Datasetversions {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    restore(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Datasetversions = Resource$Projects$Locations$Datasets$Datasetversions;\n  class Resource$Projects$Locations$Datasets$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Operations = Resource$Projects$Locations$Datasets$Operations;\n  class Resource$Projects$Locations$Datasets$Savedqueries {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Datasets$Savedqueries$Operations(this.context);\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/savedQueries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Savedqueries = Resource$Projects$Locations$Datasets$Savedqueries;\n  class Resource$Projects$Locations$Datasets$Savedqueries$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Datasets$Savedqueries$Operations = Resource$Projects$Locations$Datasets$Savedqueries$Operations;\n  class Resource$Projects$Locations$Deploymentresourcepools {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Deploymentresourcepools$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/deploymentResourcePools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/deploymentResourcePools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    queryDeployedModels(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+deploymentResourcePool}:queryDeployedModels').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['deploymentResourcePool'],\n        pathParams: ['deploymentResourcePool'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Deploymentresourcepools = Resource$Projects$Locations$Deploymentresourcepools;\n  class Resource$Projects$Locations$Deploymentresourcepools$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Deploymentresourcepools$Operations = Resource$Projects$Locations$Deploymentresourcepools$Operations;\n  class Resource$Projects$Locations$Endpoints {\n    constructor(context) {\n      this.context = context;\n      this.chat = new Resource$Projects$Locations$Endpoints$Chat(this.context);\n      this.operations = new Resource$Projects$Locations$Endpoints$Operations(this.context);\n    }\n    computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    countTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/endpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deployModel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:deployModel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    directPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:directPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    directRawPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:directRawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    explain(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:explain').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    fetchPredictOperation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:fetchPredictOperation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/endpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    mutateDeployedModel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:mutateDeployedModel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    predict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    predictLongRunning(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:predictLongRunning').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rawPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:rawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    serverStreamingPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:serverStreamingPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamRawPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:streamRawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    undeployModel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:undeployModel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:update').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Endpoints = Resource$Projects$Locations$Endpoints;\n  class Resource$Projects$Locations$Endpoints$Chat {\n    constructor(context) {\n      this.context = context;\n    }\n    completions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}/chat/completions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Endpoints$Chat = Resource$Projects$Locations$Endpoints$Chat;\n  class Resource$Projects$Locations$Endpoints$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Endpoints$Operations = Resource$Projects$Locations$Endpoints$Operations;\n  class Resource$Projects$Locations$Featuregroups {\n    constructor(context) {\n      this.context = context;\n      this.features = new Resource$Projects$Locations$Featuregroups$Features(this.context);\n      this.operations = new Resource$Projects$Locations$Featuregroups$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featuregroups = Resource$Projects$Locations$Featuregroups;\n  class Resource$Projects$Locations$Featuregroups$Features {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Featuregroups$Features$Operations(this.context);\n    }\n    batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/features:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featuregroups$Features = Resource$Projects$Locations$Featuregroups$Features;\n  class Resource$Projects$Locations$Featuregroups$Features$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listWait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featuregroups$Features$Operations = Resource$Projects$Locations$Featuregroups$Features$Operations;\n  class Resource$Projects$Locations$Featuregroups$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listWait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featuregroups$Operations = Resource$Projects$Locations$Featuregroups$Operations;\n  class Resource$Projects$Locations$Featureonlinestores {\n    constructor(context) {\n      this.context = context;\n      this.featureViews = new Resource$Projects$Locations$Featureonlinestores$Featureviews(this.context);\n      this.operations = new Resource$Projects$Locations$Featureonlinestores$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureOnlineStores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureOnlineStores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featureonlinestores = Resource$Projects$Locations$Featureonlinestores;\n  class Resource$Projects$Locations$Featureonlinestores$Featureviews {\n    constructor(context) {\n      this.context = context;\n      this.featureViewSyncs = new Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs(this.context);\n      this.operations = new Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureViews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    fetchFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+featureView}:fetchFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['featureView'],\n        pathParams: ['featureView'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureViews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    searchNearestEntities(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+featureView}:searchNearestEntities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['featureView'],\n        pathParams: ['featureView'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    sync(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+featureView}:sync').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['featureView'],\n        pathParams: ['featureView'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Featureviews = Resource$Projects$Locations$Featureonlinestores$Featureviews;\n  class Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featureViewSyncs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs = Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs;\n  class Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listWait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations = Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations;\n  class Resource$Projects$Locations$Featureonlinestores$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listWait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Operations = Resource$Projects$Locations$Featureonlinestores$Operations;\n  class Resource$Projects$Locations$Featurestores {\n    constructor(context) {\n      this.context = context;\n      this.entityTypes = new Resource$Projects$Locations$Featurestores$Entitytypes(this.context);\n      this.operations = new Resource$Projects$Locations$Featurestores$Operations(this.context);\n    }\n    batchReadFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+featurestore}:batchReadFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['featurestore'],\n        pathParams: ['featurestore'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featurestores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/featurestores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    searchFeatures(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+location}/featurestores:searchFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['location'],\n        pathParams: ['location'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featurestores = Resource$Projects$Locations$Featurestores;\n  class Resource$Projects$Locations$Featurestores$Entitytypes {\n    constructor(context) {\n      this.context = context;\n      this.features = new Resource$Projects$Locations$Featurestores$Entitytypes$Features(this.context);\n      this.operations = new Resource$Projects$Locations$Featurestores$Entitytypes$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+entityType}:deleteFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entityType'],\n        pathParams: ['entityType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    exportFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+entityType}:exportFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entityType'],\n        pathParams: ['entityType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    importFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+entityType}:importFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entityType'],\n        pathParams: ['entityType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    readFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+entityType}:readFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entityType'],\n        pathParams: ['entityType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamingReadFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+entityType}:streamingReadFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entityType'],\n        pathParams: ['entityType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    writeFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+entityType}:writeFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['entityType'],\n        pathParams: ['entityType'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes = Resource$Projects$Locations$Featurestores$Entitytypes;\n  class Resource$Projects$Locations$Featurestores$Entitytypes$Features {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations(this.context);\n    }\n    batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/features:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes$Features = Resource$Projects$Locations$Featurestores$Entitytypes$Features;\n  class Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations = Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations;\n  class Resource$Projects$Locations$Featurestores$Entitytypes$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes$Operations = Resource$Projects$Locations$Featurestores$Entitytypes$Operations;\n  class Resource$Projects$Locations$Featurestores$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Featurestores$Operations = Resource$Projects$Locations$Featurestores$Operations;\n  class Resource$Projects$Locations$Hyperparametertuningjobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Hyperparametertuningjobs$Operations(this.context);\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/hyperparameterTuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/hyperparameterTuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Hyperparametertuningjobs = Resource$Projects$Locations$Hyperparametertuningjobs;\n  class Resource$Projects$Locations$Hyperparametertuningjobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Hyperparametertuningjobs$Operations = Resource$Projects$Locations$Hyperparametertuningjobs$Operations;\n  class Resource$Projects$Locations$Indexendpoints {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Indexendpoints$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/indexEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deployIndex(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+indexEndpoint}:deployIndex').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['indexEndpoint'],\n        pathParams: ['indexEndpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    findNeighbors(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+indexEndpoint}:findNeighbors').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['indexEndpoint'],\n        pathParams: ['indexEndpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/indexEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    mutateDeployedIndex(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+indexEndpoint}:mutateDeployedIndex').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['indexEndpoint'],\n        pathParams: ['indexEndpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    readIndexDatapoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+indexEndpoint}:readIndexDatapoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['indexEndpoint'],\n        pathParams: ['indexEndpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    undeployIndex(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+indexEndpoint}:undeployIndex').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['indexEndpoint'],\n        pathParams: ['indexEndpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Indexendpoints = Resource$Projects$Locations$Indexendpoints;\n  class Resource$Projects$Locations$Indexendpoints$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Indexendpoints$Operations = Resource$Projects$Locations$Indexendpoints$Operations;\n  class Resource$Projects$Locations$Indexes {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Indexes$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/indexes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/indexes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeDatapoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+index}:removeDatapoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['index'],\n        pathParams: ['index'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upsertDatapoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+index}:upsertDatapoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['index'],\n        pathParams: ['index'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Indexes = Resource$Projects$Locations$Indexes;\n  class Resource$Projects$Locations$Indexes$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Indexes$Operations = Resource$Projects$Locations$Indexes$Operations;\n  class Resource$Projects$Locations$Metadatastores {\n    constructor(context) {\n      this.context = context;\n      this.artifacts = new Resource$Projects$Locations$Metadatastores$Artifacts(this.context);\n      this.contexts = new Resource$Projects$Locations$Metadatastores$Contexts(this.context);\n      this.executions = new Resource$Projects$Locations$Metadatastores$Executions(this.context);\n      this.metadataSchemas = new Resource$Projects$Locations$Metadatastores$Metadataschemas(this.context);\n      this.operations = new Resource$Projects$Locations$Metadatastores$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/metadataStores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/metadataStores').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores = Resource$Projects$Locations$Metadatastores;\n  class Resource$Projects$Locations$Metadatastores$Artifacts {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Metadatastores$Artifacts$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/artifacts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/artifacts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    purge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/artifacts:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    queryArtifactLineageSubgraph(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+artifact}:queryArtifactLineageSubgraph').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['artifact'],\n        pathParams: ['artifact'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Artifacts = Resource$Projects$Locations$Metadatastores$Artifacts;\n  class Resource$Projects$Locations$Metadatastores$Artifacts$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Artifacts$Operations = Resource$Projects$Locations$Metadatastores$Artifacts$Operations;\n  class Resource$Projects$Locations$Metadatastores$Contexts {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Metadatastores$Contexts$Operations(this.context);\n    }\n    addContextArtifactsAndExecutions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+context}:addContextArtifactsAndExecutions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['context'],\n        pathParams: ['context'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    addContextChildren(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+context}:addContextChildren').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['context'],\n        pathParams: ['context'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    purge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/contexts:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    queryContextLineageSubgraph(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+context}:queryContextLineageSubgraph').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['context'],\n        pathParams: ['context'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    removeContextChildren(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+context}:removeContextChildren').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['context'],\n        pathParams: ['context'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Contexts = Resource$Projects$Locations$Metadatastores$Contexts;\n  class Resource$Projects$Locations$Metadatastores$Contexts$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Contexts$Operations = Resource$Projects$Locations$Metadatastores$Contexts$Operations;\n  class Resource$Projects$Locations$Metadatastores$Executions {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Metadatastores$Executions$Operations(this.context);\n    }\n    addExecutionEvents(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+execution}:addExecutionEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['execution'],\n        pathParams: ['execution'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    purge(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/executions:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    queryExecutionInputsAndOutputs(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+execution}:queryExecutionInputsAndOutputs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['execution'],\n        pathParams: ['execution'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Executions = Resource$Projects$Locations$Metadatastores$Executions;\n  class Resource$Projects$Locations$Metadatastores$Executions$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Executions$Operations = Resource$Projects$Locations$Metadatastores$Executions$Operations;\n  class Resource$Projects$Locations$Metadatastores$Metadataschemas {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/metadataSchemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/metadataSchemas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Metadataschemas = Resource$Projects$Locations$Metadatastores$Metadataschemas;\n  class Resource$Projects$Locations$Metadatastores$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Metadatastores$Operations = Resource$Projects$Locations$Metadatastores$Operations;\n  class Resource$Projects$Locations$Migratableresources {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Migratableresources$Operations(this.context);\n    }\n    batchMigrate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/migratableResources:batchMigrate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    search(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/migratableResources:search').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Migratableresources = Resource$Projects$Locations$Migratableresources;\n  class Resource$Projects$Locations$Migratableresources$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Migratableresources$Operations = Resource$Projects$Locations$Migratableresources$Operations;\n  class Resource$Projects$Locations$Modeldeploymentmonitoringjobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/modelDeploymentMonitoringJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/modelDeploymentMonitoringJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    pause(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    searchModelDeploymentMonitoringStatsAnomalies(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+modelDeploymentMonitoringJob}:searchModelDeploymentMonitoringStatsAnomalies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['modelDeploymentMonitoringJob'],\n        pathParams: ['modelDeploymentMonitoringJob'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Modeldeploymentmonitoringjobs = Resource$Projects$Locations$Modeldeploymentmonitoringjobs;\n  class Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations = Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations;\n  class Resource$Projects$Locations$Models {\n    constructor(context) {\n      this.context = context;\n      this.evaluations = new Resource$Projects$Locations$Models$Evaluations(this.context);\n      this.operations = new Resource$Projects$Locations$Models$Operations(this.context);\n    }\n    copy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/models:copy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    deleteVersion(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:deleteVersion').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/models').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listCheckpoints(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:listCheckpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listVersions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:listVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    mergeVersionAliases(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:mergeVersionAliases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    updateExplanationDataset(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:updateExplanationDataset').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/models:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Models = Resource$Projects$Locations$Models;\n  class Resource$Projects$Locations$Models$Evaluations {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Models$Evaluations$Operations(this.context);\n      this.slices = new Resource$Projects$Locations$Models$Evaluations$Slices(this.context);\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/evaluations:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/evaluations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Models$Evaluations = Resource$Projects$Locations$Models$Evaluations;\n  class Resource$Projects$Locations$Models$Evaluations$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Models$Evaluations$Operations = Resource$Projects$Locations$Models$Evaluations$Operations;\n  class Resource$Projects$Locations$Models$Evaluations$Slices {\n    constructor(context) {\n      this.context = context;\n    }\n    batchImport(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}:batchImport').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/slices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Models$Evaluations$Slices = Resource$Projects$Locations$Models$Evaluations$Slices;\n  class Resource$Projects$Locations$Models$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Models$Operations = Resource$Projects$Locations$Models$Operations;\n  class Resource$Projects$Locations$Nasjobs {\n    constructor(context) {\n      this.context = context;\n      this.nasTrialDetails = new Resource$Projects$Locations$Nasjobs$Nastrialdetails(this.context);\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/nasJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/nasJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Nasjobs = Resource$Projects$Locations$Nasjobs;\n  class Resource$Projects$Locations$Nasjobs$Nastrialdetails {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/nasTrialDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Nasjobs$Nastrialdetails = Resource$Projects$Locations$Nasjobs$Nastrialdetails;\n  class Resource$Projects$Locations$Notebookexecutionjobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Notebookexecutionjobs$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/notebookExecutionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/notebookExecutionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Notebookexecutionjobs = Resource$Projects$Locations$Notebookexecutionjobs;\n  class Resource$Projects$Locations$Notebookexecutionjobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Notebookexecutionjobs$Operations = Resource$Projects$Locations$Notebookexecutionjobs$Operations;\n  class Resource$Projects$Locations$Notebookruntimes {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Notebookruntimes$Operations(this.context);\n    }\n    assign(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/notebookRuntimes:assign').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/notebookRuntimes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    start(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:start').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    upgrade(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:upgrade').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Notebookruntimes = Resource$Projects$Locations$Notebookruntimes;\n  class Resource$Projects$Locations$Notebookruntimes$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Notebookruntimes$Operations = Resource$Projects$Locations$Notebookruntimes$Operations;\n  class Resource$Projects$Locations$Notebookruntimetemplates {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Notebookruntimetemplates$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/notebookRuntimeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/notebookRuntimeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Notebookruntimetemplates = Resource$Projects$Locations$Notebookruntimetemplates;\n  class Resource$Projects$Locations$Notebookruntimetemplates$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Notebookruntimetemplates$Operations = Resource$Projects$Locations$Notebookruntimetemplates$Operations;\n  class Resource$Projects$Locations$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;\n  class Resource$Projects$Locations$Persistentresources {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Persistentresources$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/persistentResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/persistentResources').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    reboot(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:reboot').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Persistentresources = Resource$Projects$Locations$Persistentresources;\n  class Resource$Projects$Locations$Persistentresources$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Persistentresources$Operations = Resource$Projects$Locations$Persistentresources$Operations;\n  class Resource$Projects$Locations$Pipelinejobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Pipelinejobs$Operations(this.context);\n    }\n    batchCancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/pipelineJobs:batchCancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    batchDelete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/pipelineJobs:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/pipelineJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/pipelineJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Pipelinejobs = Resource$Projects$Locations$Pipelinejobs;\n  class Resource$Projects$Locations$Pipelinejobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Pipelinejobs$Operations = Resource$Projects$Locations$Pipelinejobs$Operations;\n  class Resource$Projects$Locations$Publishers {\n    constructor(context) {\n      this.context = context;\n      this.models = new Resource$Projects$Locations$Publishers$Models(this.context);\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Publishers = Resource$Projects$Locations$Publishers;\n  class Resource$Projects$Locations$Publishers$Models {\n    constructor(context) {\n      this.context = context;\n    }\n    computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    countTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    fetchPredictOperation(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:fetchPredictOperation').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    predict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    predictLongRunning(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:predictLongRunning').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rawPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:rawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    serverStreamingPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:serverStreamingPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamRawPredict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:streamRawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Publishers$Models = Resource$Projects$Locations$Publishers$Models;\n  class Resource$Projects$Locations$Ragcorpora {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Ragcorpora$Operations(this.context);\n      this.ragFiles = new Resource$Projects$Locations$Ragcorpora$Ragfiles(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/ragCorpora').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/ragCorpora').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Ragcorpora = Resource$Projects$Locations$Ragcorpora;\n  class Resource$Projects$Locations$Ragcorpora$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Ragcorpora$Operations = Resource$Projects$Locations$Ragcorpora$Operations;\n  class Resource$Projects$Locations$Ragcorpora$Ragfiles {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations(this.context);\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/ragFiles:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/ragFiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Ragcorpora$Ragfiles = Resource$Projects$Locations$Ragcorpora$Ragfiles;\n  class Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations = Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations;\n  class Resource$Projects$Locations$Reasoningengines {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Reasoningengines$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/reasoningEngines').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/reasoningEngines').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    query(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamQuery(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:streamQuery').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Reasoningengines = Resource$Projects$Locations$Reasoningengines;\n  class Resource$Projects$Locations$Reasoningengines$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Reasoningengines$Operations = Resource$Projects$Locations$Reasoningengines$Operations;\n  class Resource$Projects$Locations$Schedules {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Schedules$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/schedules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/schedules').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    pause(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    resume(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Schedules = Resource$Projects$Locations$Schedules;\n  class Resource$Projects$Locations$Schedules$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Schedules$Operations = Resource$Projects$Locations$Schedules$Operations;\n  class Resource$Projects$Locations$Specialistpools {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Specialistpools$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/specialistPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/specialistPools').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Specialistpools = Resource$Projects$Locations$Specialistpools;\n  class Resource$Projects$Locations$Specialistpools$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Specialistpools$Operations = Resource$Projects$Locations$Specialistpools$Operations;\n  class Resource$Projects$Locations$Studies {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Studies$Operations(this.context);\n      this.trials = new Resource$Projects$Locations$Studies$Trials(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/studies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/studies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    lookup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/studies:lookup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Studies = Resource$Projects$Locations$Studies;\n  class Resource$Projects$Locations$Studies$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Studies$Operations = Resource$Projects$Locations$Studies$Operations;\n  class Resource$Projects$Locations$Studies$Trials {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Studies$Trials$Operations(this.context);\n    }\n    addTrialMeasurement(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+trialName}:addTrialMeasurement').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['trialName'],\n        pathParams: ['trialName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    checkTrialEarlyStoppingState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+trialName}:checkTrialEarlyStoppingState').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['trialName'],\n        pathParams: ['trialName'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    complete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:complete').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/trials').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/trials').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    listOptimalTrials(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/trials:listOptimalTrials').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    stop(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:stop').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    suggest(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/trials:suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Studies$Trials = Resource$Projects$Locations$Studies$Trials;\n  class Resource$Projects$Locations$Studies$Trials$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Studies$Trials$Operations = Resource$Projects$Locations$Studies$Trials$Operations;\n  class Resource$Projects$Locations$Tensorboards {\n    constructor(context) {\n      this.context = context;\n      this.experiments = new Resource$Projects$Locations$Tensorboards$Experiments(this.context);\n      this.operations = new Resource$Projects$Locations$Tensorboards$Operations(this.context);\n    }\n    batchRead(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboard}:batchRead').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboard'],\n        pathParams: ['tensorboard'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/tensorboards').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/tensorboards').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    readSize(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboard}:readSize').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboard'],\n        pathParams: ['tensorboard'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    readUsage(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboard}:readUsage').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboard'],\n        pathParams: ['tensorboard'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards = Resource$Projects$Locations$Tensorboards;\n  class Resource$Projects$Locations$Tensorboards$Experiments {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Tensorboards$Experiments$Operations(this.context);\n      this.runs = new Resource$Projects$Locations$Tensorboards$Experiments$Runs(this.context);\n    }\n    batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    write(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboardExperiment}:write').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboardExperiment'],\n        pathParams: ['tensorboardExperiment'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments = Resource$Projects$Locations$Tensorboards$Experiments;\n  class Resource$Projects$Locations$Tensorboards$Experiments$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Operations = Resource$Projects$Locations$Tensorboards$Experiments$Operations;\n  class Resource$Projects$Locations$Tensorboards$Experiments$Runs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations(this.context);\n      this.timeSeries = new Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries(this.context);\n    }\n    batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/runs:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/runs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/runs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    write(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboardRun}:write').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboardRun'],\n        pathParams: ['tensorboardRun'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs = Resource$Projects$Locations$Tensorboards$Experiments$Runs;\n  class Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations = Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations;\n  class Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations(this.context);\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    exportTensorboardTimeSeries(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboardTimeSeries}:exportTensorboardTimeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboardTimeSeries'],\n        pathParams: ['tensorboardTimeSeries'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    read(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+tensorboardTimeSeries}:read').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['tensorboardTimeSeries'],\n        pathParams: ['tensorboardTimeSeries'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    readBlobData(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+timeSeries}:readBlobData').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['timeSeries'],\n        pathParams: ['timeSeries'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries = Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries;\n  class Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations = Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations;\n  class Resource$Projects$Locations$Tensorboards$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tensorboards$Operations = Resource$Projects$Locations$Tensorboards$Operations;\n  class Resource$Projects$Locations$Trainingpipelines {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Trainingpipelines$Operations(this.context);\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/trainingPipelines').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/trainingPipelines').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Trainingpipelines = Resource$Projects$Locations$Trainingpipelines;\n  class Resource$Projects$Locations$Trainingpipelines$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    wait(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Trainingpipelines$Operations = Resource$Projects$Locations$Trainingpipelines$Operations;\n  class Resource$Projects$Locations$Tuningjobs {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Tuningjobs$Operations(this.context);\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/tuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/tuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    rebaseTunedModel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/tuningJobs:rebaseTunedModel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tuningjobs = Resource$Projects$Locations$Tuningjobs;\n  class Resource$Projects$Locations$Tuningjobs$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Projects$Locations$Tuningjobs$Operations = Resource$Projects$Locations$Tuningjobs$Operations;\n  class Resource$Publishers {\n    constructor(context) {\n      this.context = context;\n      this.models = new Resource$Publishers$Models(this.context);\n    }\n  }\n  aiplatform_v1.Resource$Publishers = Resource$Publishers;\n  class Resource$Publishers$Models {\n    constructor(context) {\n      this.context = context;\n    }\n    computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    countTokens(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    generateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    predict(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['endpoint'],\n        pathParams: ['endpoint'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST',\n          apiVersion: ''\n        }, options),\n        params,\n        requiredParams: ['model'],\n        pathParams: ['model'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  aiplatform_v1.Resource$Publishers$Models = Resource$Publishers$Models;\n})(aiplatform_v1 || (exports.aiplatform_v1 = aiplatform_v1 = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","aiplatform_v1","googleapis_common_1","require","Aiplatform","constructor","options","google","context","_options","datasets","Resource$Datasets","endpoints","Resource$Endpoints","media","Resource$Media","projects","Resource$Projects","publishers","Resource$Publishers","datasetVersions","Resource$Datasets$Datasetversions","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","apiVersion","requiredParams","pathParams","createAPIRequest","delete","get","list","patch","restore","computeTokens","countTokens","generateContent","predict","streamGenerateContent","upload","mediaUrl","locations","Resource$Projects$Locations","getCacheConfig","updateCacheConfig","batchPredictionJobs","Resource$Projects$Locations$Batchpredictionjobs","cachedContents","Resource$Projects$Locations$Cachedcontents","customJobs","Resource$Projects$Locations$Customjobs","dataLabelingJobs","Resource$Projects$Locations$Datalabelingjobs","Resource$Projects$Locations$Datasets","deploymentResourcePools","Resource$Projects$Locations$Deploymentresourcepools","Resource$Projects$Locations$Endpoints","featureGroups","Resource$Projects$Locations$Featuregroups","featureOnlineStores","Resource$Projects$Locations$Featureonlinestores","featurestores","Resource$Projects$Locations$Featurestores","hyperparameterTuningJobs","Resource$Projects$Locations$Hyperparametertuningjobs","indexEndpoints","Resource$Projects$Locations$Indexendpoints","indexes","Resource$Projects$Locations$Indexes","metadataStores","Resource$Projects$Locations$Metadatastores","migratableResources","Resource$Projects$Locations$Migratableresources","modelDeploymentMonitoringJobs","Resource$Projects$Locations$Modeldeploymentmonitoringjobs","models","Resource$Projects$Locations$Models","nasJobs","Resource$Projects$Locations$Nasjobs","notebookExecutionJobs","Resource$Projects$Locations$Notebookexecutionjobs","notebookRuntimes","Resource$Projects$Locations$Notebookruntimes","notebookRuntimeTemplates","Resource$Projects$Locations$Notebookruntimetemplates","operations","Resource$Projects$Locations$Operations","persistentResources","Resource$Projects$Locations$Persistentresources","pipelineJobs","Resource$Projects$Locations$Pipelinejobs","Resource$Projects$Locations$Publishers","ragCorpora","Resource$Projects$Locations$Ragcorpora","reasoningEngines","Resource$Projects$Locations$Reasoningengines","schedules","Resource$Projects$Locations$Schedules","specialistPools","Resource$Projects$Locations$Specialistpools","studies","Resource$Projects$Locations$Studies","tensorboards","Resource$Projects$Locations$Tensorboards","trainingPipelines","Resource$Projects$Locations$Trainingpipelines","tuningJobs","Resource$Projects$Locations$Tuningjobs","augmentPrompt","corroborateContent","evaluateDataset","evaluateInstances","retrieveContexts","cancel","Resource$Projects$Locations$Customjobs$Operations","wait","Resource$Projects$Locations$Datalabelingjobs$Operations","annotationSpecs","Resource$Projects$Locations$Datasets$Annotationspecs","dataItems","Resource$Projects$Locations$Datasets$Dataitems","Resource$Projects$Locations$Datasets$Datasetversions","Resource$Projects$Locations$Datasets$Operations","savedQueries","Resource$Projects$Locations$Datasets$Savedqueries","export","import","searchDataItems","Resource$Projects$Locations$Datasets$Annotationspecs$Operations","annotations","Resource$Projects$Locations$Datasets$Dataitems$Annotations","Resource$Projects$Locations$Datasets$Dataitems$Operations","Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations","Resource$Projects$Locations$Datasets$Savedqueries$Operations","Resource$Projects$Locations$Deploymentresourcepools$Operations","queryDeployedModels","chat","Resource$Projects$Locations$Endpoints$Chat","Resource$Projects$Locations$Endpoints$Operations","deployModel","directPredict","directRawPredict","explain","fetchPredictOperation","mutateDeployedModel","predictLongRunning","rawPredict","serverStreamingPredict","streamRawPredict","undeployModel","update","completions","features","Resource$Projects$Locations$Featuregroups$Features","Resource$Projects$Locations$Featuregroups$Operations","Resource$Projects$Locations$Featuregroups$Features$Operations","batchCreate","listWait","featureViews","Resource$Projects$Locations$Featureonlinestores$Featureviews","Resource$Projects$Locations$Featureonlinestores$Operations","getIamPolicy","setIamPolicy","testIamPermissions","featureViewSyncs","Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs","Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations","fetchFeatureValues","searchNearestEntities","sync","entityTypes","Resource$Projects$Locations$Featurestores$Entitytypes","Resource$Projects$Locations$Featurestores$Operations","batchReadFeatureValues","searchFeatures","Resource$Projects$Locations$Featurestores$Entitytypes$Features","Resource$Projects$Locations$Featurestores$Entitytypes$Operations","deleteFeatureValues","exportFeatureValues","importFeatureValues","readFeatureValues","streamingReadFeatureValues","writeFeatureValues","Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations","Resource$Projects$Locations$Hyperparametertuningjobs$Operations","Resource$Projects$Locations$Indexendpoints$Operations","deployIndex","findNeighbors","mutateDeployedIndex","readIndexDatapoints","undeployIndex","Resource$Projects$Locations$Indexes$Operations","removeDatapoints","upsertDatapoints","artifacts","Resource$Projects$Locations$Metadatastores$Artifacts","contexts","Resource$Projects$Locations$Metadatastores$Contexts","executions","Resource$Projects$Locations$Metadatastores$Executions","metadataSchemas","Resource$Projects$Locations$Metadatastores$Metadataschemas","Resource$Projects$Locations$Metadatastores$Operations","Resource$Projects$Locations$Metadatastores$Artifacts$Operations","purge","queryArtifactLineageSubgraph","Resource$Projects$Locations$Metadatastores$Contexts$Operations","addContextArtifactsAndExecutions","addContextChildren","queryContextLineageSubgraph","removeContextChildren","Resource$Projects$Locations$Metadatastores$Executions$Operations","addExecutionEvents","queryExecutionInputsAndOutputs","Resource$Projects$Locations$Migratableresources$Operations","batchMigrate","search","Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations","pause","resume","searchModelDeploymentMonitoringStatsAnomalies","evaluations","Resource$Projects$Locations$Models$Evaluations","Resource$Projects$Locations$Models$Operations","copy","deleteVersion","listCheckpoints","listVersions","mergeVersionAliases","updateExplanationDataset","Resource$Projects$Locations$Models$Evaluations$Operations","slices","Resource$Projects$Locations$Models$Evaluations$Slices","batchImport","nasTrialDetails","Resource$Projects$Locations$Nasjobs$Nastrialdetails","Resource$Projects$Locations$Notebookexecutionjobs$Operations","Resource$Projects$Locations$Notebookruntimes$Operations","start","stop","upgrade","Resource$Projects$Locations$Notebookruntimetemplates$Operations","Resource$Projects$Locations$Persistentresources$Operations","reboot","Resource$Projects$Locations$Pipelinejobs$Operations","batchCancel","batchDelete","Resource$Projects$Locations$Publishers$Models","Resource$Projects$Locations$Ragcorpora$Operations","ragFiles","Resource$Projects$Locations$Ragcorpora$Ragfiles","Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations","Resource$Projects$Locations$Reasoningengines$Operations","query","streamQuery","Resource$Projects$Locations$Schedules$Operations","Resource$Projects$Locations$Specialistpools$Operations","Resource$Projects$Locations$Studies$Operations","trials","Resource$Projects$Locations$Studies$Trials","lookup","Resource$Projects$Locations$Studies$Trials$Operations","addTrialMeasurement","checkTrialEarlyStoppingState","complete","listOptimalTrials","suggest","experiments","Resource$Projects$Locations$Tensorboards$Experiments","Resource$Projects$Locations$Tensorboards$Operations","batchRead","readSize","readUsage","Resource$Projects$Locations$Tensorboards$Experiments$Operations","runs","Resource$Projects$Locations$Tensorboards$Experiments$Runs","write","Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations","timeSeries","Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries","Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations","exportTensorboardTimeSeries","read","readBlobData","Resource$Projects$Locations$Trainingpipelines$Operations","Resource$Projects$Locations$Tuningjobs$Operations","rebaseTunedModel","Resource$Publishers$Models"],"sources":["C:/Users/citla/codebase/playingWithCursor/projects/javascript/node_modules/googleapis/build/src/apis/aiplatform/v1.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.aiplatform_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar aiplatform_v1;\n(function (aiplatform_v1) {\n    /**\n     * Vertex AI API\n     *\n     * Train high-quality custom machine learning models with minimal machine learning expertise and effort.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const aiplatform = google.aiplatform('v1');\n     * ```\n     */\n    class Aiplatform {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.datasets = new Resource$Datasets(this.context);\n            this.endpoints = new Resource$Endpoints(this.context);\n            this.media = new Resource$Media(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.publishers = new Resource$Publishers(this.context);\n        }\n    }\n    aiplatform_v1.Aiplatform = Aiplatform;\n    class Resource$Datasets {\n        constructor(context) {\n            this.context = context;\n            this.datasetVersions = new Resource$Datasets$Datasetversions(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Datasets = Resource$Datasets;\n    class Resource$Datasets$Datasetversions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        restore(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Datasets$Datasetversions = Resource$Datasets$Datasetversions;\n    class Resource$Endpoints {\n        constructor(context) {\n            this.context = context;\n        }\n        computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        countTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        predict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Endpoints = Resource$Endpoints;\n    class Resource$Media {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/ragFiles:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/v1/{+parent}/ragFiles:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Media = Resource$Media;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Projects$Locations(this.context);\n        }\n        getCacheConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateCacheConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.batchPredictionJobs =\n                new Resource$Projects$Locations$Batchpredictionjobs(this.context);\n            this.cachedContents = new Resource$Projects$Locations$Cachedcontents(this.context);\n            this.customJobs = new Resource$Projects$Locations$Customjobs(this.context);\n            this.dataLabelingJobs = new Resource$Projects$Locations$Datalabelingjobs(this.context);\n            this.datasets = new Resource$Projects$Locations$Datasets(this.context);\n            this.deploymentResourcePools =\n                new Resource$Projects$Locations$Deploymentresourcepools(this.context);\n            this.endpoints = new Resource$Projects$Locations$Endpoints(this.context);\n            this.featureGroups = new Resource$Projects$Locations$Featuregroups(this.context);\n            this.featureOnlineStores =\n                new Resource$Projects$Locations$Featureonlinestores(this.context);\n            this.featurestores = new Resource$Projects$Locations$Featurestores(this.context);\n            this.hyperparameterTuningJobs =\n                new Resource$Projects$Locations$Hyperparametertuningjobs(this.context);\n            this.indexEndpoints = new Resource$Projects$Locations$Indexendpoints(this.context);\n            this.indexes = new Resource$Projects$Locations$Indexes(this.context);\n            this.metadataStores = new Resource$Projects$Locations$Metadatastores(this.context);\n            this.migratableResources =\n                new Resource$Projects$Locations$Migratableresources(this.context);\n            this.modelDeploymentMonitoringJobs =\n                new Resource$Projects$Locations$Modeldeploymentmonitoringjobs(this.context);\n            this.models = new Resource$Projects$Locations$Models(this.context);\n            this.nasJobs = new Resource$Projects$Locations$Nasjobs(this.context);\n            this.notebookExecutionJobs =\n                new Resource$Projects$Locations$Notebookexecutionjobs(this.context);\n            this.notebookRuntimes = new Resource$Projects$Locations$Notebookruntimes(this.context);\n            this.notebookRuntimeTemplates =\n                new Resource$Projects$Locations$Notebookruntimetemplates(this.context);\n            this.operations = new Resource$Projects$Locations$Operations(this.context);\n            this.persistentResources =\n                new Resource$Projects$Locations$Persistentresources(this.context);\n            this.pipelineJobs = new Resource$Projects$Locations$Pipelinejobs(this.context);\n            this.publishers = new Resource$Projects$Locations$Publishers(this.context);\n            this.ragCorpora = new Resource$Projects$Locations$Ragcorpora(this.context);\n            this.reasoningEngines = new Resource$Projects$Locations$Reasoningengines(this.context);\n            this.schedules = new Resource$Projects$Locations$Schedules(this.context);\n            this.specialistPools = new Resource$Projects$Locations$Specialistpools(this.context);\n            this.studies = new Resource$Projects$Locations$Studies(this.context);\n            this.tensorboards = new Resource$Projects$Locations$Tensorboards(this.context);\n            this.trainingPipelines =\n                new Resource$Projects$Locations$Trainingpipelines(this.context);\n            this.tuningJobs = new Resource$Projects$Locations$Tuningjobs(this.context);\n        }\n        augmentPrompt(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:augmentPrompt').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        corroborateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:corroborateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        evaluateDataset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+location}:evaluateDataset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['location'],\n                pathParams: ['location'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        evaluateInstances(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+location}:evaluateInstances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['location'],\n                pathParams: ['location'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        retrieveContexts(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:retrieveContexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Batchpredictionjobs {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/batchPredictionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/batchPredictionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Batchpredictionjobs = Resource$Projects$Locations$Batchpredictionjobs;\n    class Resource$Projects$Locations$Cachedcontents {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/cachedContents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/cachedContents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Cachedcontents = Resource$Projects$Locations$Cachedcontents;\n    class Resource$Projects$Locations$Customjobs {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Customjobs$Operations(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/customJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/customJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Customjobs = Resource$Projects$Locations$Customjobs;\n    class Resource$Projects$Locations$Customjobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Customjobs$Operations = Resource$Projects$Locations$Customjobs$Operations;\n    class Resource$Projects$Locations$Datalabelingjobs {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Datalabelingjobs$Operations(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dataLabelingJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dataLabelingJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datalabelingjobs = Resource$Projects$Locations$Datalabelingjobs;\n    class Resource$Projects$Locations$Datalabelingjobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datalabelingjobs$Operations = Resource$Projects$Locations$Datalabelingjobs$Operations;\n    class Resource$Projects$Locations$Datasets {\n        constructor(context) {\n            this.context = context;\n            this.annotationSpecs =\n                new Resource$Projects$Locations$Datasets$Annotationspecs(this.context);\n            this.dataItems = new Resource$Projects$Locations$Datasets$Dataitems(this.context);\n            this.datasetVersions =\n                new Resource$Projects$Locations$Datasets$Datasetversions(this.context);\n            this.operations = new Resource$Projects$Locations$Datasets$Operations(this.context);\n            this.savedQueries = new Resource$Projects$Locations$Datasets$Savedqueries(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchDataItems(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+dataset}:searchDataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['dataset'],\n                pathParams: ['dataset'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets = Resource$Projects$Locations$Datasets;\n    class Resource$Projects$Locations$Datasets$Annotationspecs {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Datasets$Annotationspecs$Operations(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Annotationspecs = Resource$Projects$Locations$Datasets$Annotationspecs;\n    class Resource$Projects$Locations$Datasets$Annotationspecs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Annotationspecs$Operations = Resource$Projects$Locations$Datasets$Annotationspecs$Operations;\n    class Resource$Projects$Locations$Datasets$Dataitems {\n        constructor(context) {\n            this.context = context;\n            this.annotations =\n                new Resource$Projects$Locations$Datasets$Dataitems$Annotations(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Datasets$Dataitems$Operations(this.context);\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/dataItems').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems = Resource$Projects$Locations$Datasets$Dataitems;\n    class Resource$Projects$Locations$Datasets$Dataitems$Annotations {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations(this.context);\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/annotations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems$Annotations = Resource$Projects$Locations$Datasets$Dataitems$Annotations;\n    class Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations = Resource$Projects$Locations$Datasets$Dataitems$Annotations$Operations;\n    class Resource$Projects$Locations$Datasets$Dataitems$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Dataitems$Operations = Resource$Projects$Locations$Datasets$Dataitems$Operations;\n    class Resource$Projects$Locations$Datasets$Datasetversions {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/datasetVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        restore(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:restore').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Datasetversions = Resource$Projects$Locations$Datasets$Datasetversions;\n    class Resource$Projects$Locations$Datasets$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Operations = Resource$Projects$Locations$Datasets$Operations;\n    class Resource$Projects$Locations$Datasets$Savedqueries {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Datasets$Savedqueries$Operations(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/savedQueries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Savedqueries = Resource$Projects$Locations$Datasets$Savedqueries;\n    class Resource$Projects$Locations$Datasets$Savedqueries$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Datasets$Savedqueries$Operations = Resource$Projects$Locations$Datasets$Savedqueries$Operations;\n    class Resource$Projects$Locations$Deploymentresourcepools {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Deploymentresourcepools$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/deploymentResourcePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/deploymentResourcePools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        queryDeployedModels(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+deploymentResourcePool}:queryDeployedModels').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['deploymentResourcePool'],\n                pathParams: ['deploymentResourcePool'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Deploymentresourcepools = Resource$Projects$Locations$Deploymentresourcepools;\n    class Resource$Projects$Locations$Deploymentresourcepools$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Deploymentresourcepools$Operations = Resource$Projects$Locations$Deploymentresourcepools$Operations;\n    class Resource$Projects$Locations$Endpoints {\n        constructor(context) {\n            this.context = context;\n            this.chat = new Resource$Projects$Locations$Endpoints$Chat(this.context);\n            this.operations = new Resource$Projects$Locations$Endpoints$Operations(this.context);\n        }\n        computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        countTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/endpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deployModel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:deployModel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        directPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:directPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        directRawPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:directRawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        explain(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:explain').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        fetchPredictOperation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:fetchPredictOperation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/endpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        mutateDeployedModel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:mutateDeployedModel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        predict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        predictLongRunning(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:predictLongRunning').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rawPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:rawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        serverStreamingPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:serverStreamingPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamRawPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:streamRawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        undeployModel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:undeployModel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:update').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Endpoints = Resource$Projects$Locations$Endpoints;\n    class Resource$Projects$Locations$Endpoints$Chat {\n        constructor(context) {\n            this.context = context;\n        }\n        completions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}/chat/completions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Endpoints$Chat = Resource$Projects$Locations$Endpoints$Chat;\n    class Resource$Projects$Locations$Endpoints$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Endpoints$Operations = Resource$Projects$Locations$Endpoints$Operations;\n    class Resource$Projects$Locations$Featuregroups {\n        constructor(context) {\n            this.context = context;\n            this.features = new Resource$Projects$Locations$Featuregroups$Features(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Featuregroups$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featuregroups = Resource$Projects$Locations$Featuregroups;\n    class Resource$Projects$Locations$Featuregroups$Features {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Featuregroups$Features$Operations(this.context);\n        }\n        batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/features:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featuregroups$Features = Resource$Projects$Locations$Featuregroups$Features;\n    class Resource$Projects$Locations$Featuregroups$Features$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listWait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featuregroups$Features$Operations = Resource$Projects$Locations$Featuregroups$Features$Operations;\n    class Resource$Projects$Locations$Featuregroups$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listWait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featuregroups$Operations = Resource$Projects$Locations$Featuregroups$Operations;\n    class Resource$Projects$Locations$Featureonlinestores {\n        constructor(context) {\n            this.context = context;\n            this.featureViews =\n                new Resource$Projects$Locations$Featureonlinestores$Featureviews(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Featureonlinestores$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureOnlineStores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureOnlineStores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featureonlinestores = Resource$Projects$Locations$Featureonlinestores;\n    class Resource$Projects$Locations$Featureonlinestores$Featureviews {\n        constructor(context) {\n            this.context = context;\n            this.featureViewSyncs =\n                new Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureViews').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        fetchFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+featureView}:fetchFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['featureView'],\n                pathParams: ['featureView'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureViews').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchNearestEntities(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+featureView}:searchNearestEntities').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['featureView'],\n                pathParams: ['featureView'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        sync(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+featureView}:sync').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['featureView'],\n                pathParams: ['featureView'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Featureviews = Resource$Projects$Locations$Featureonlinestores$Featureviews;\n    class Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featureViewSyncs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs = Resource$Projects$Locations$Featureonlinestores$Featureviews$Featureviewsyncs;\n    class Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listWait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations = Resource$Projects$Locations$Featureonlinestores$Featureviews$Operations;\n    class Resource$Projects$Locations$Featureonlinestores$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listWait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featureonlinestores$Operations = Resource$Projects$Locations$Featureonlinestores$Operations;\n    class Resource$Projects$Locations$Featurestores {\n        constructor(context) {\n            this.context = context;\n            this.entityTypes =\n                new Resource$Projects$Locations$Featurestores$Entitytypes(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Featurestores$Operations(this.context);\n        }\n        batchReadFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+featurestore}:batchReadFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['featurestore'],\n                pathParams: ['featurestore'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featurestores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/featurestores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchFeatures(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+location}/featurestores:searchFeatures').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['location'],\n                pathParams: ['location'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featurestores = Resource$Projects$Locations$Featurestores;\n    class Resource$Projects$Locations$Featurestores$Entitytypes {\n        constructor(context) {\n            this.context = context;\n            this.features =\n                new Resource$Projects$Locations$Featurestores$Entitytypes$Features(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Featurestores$Entitytypes$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+entityType}:deleteFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entityType'],\n                pathParams: ['entityType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        exportFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+entityType}:exportFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entityType'],\n                pathParams: ['entityType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        importFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+entityType}:importFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entityType'],\n                pathParams: ['entityType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/entityTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        readFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+entityType}:readFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entityType'],\n                pathParams: ['entityType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamingReadFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+entityType}:streamingReadFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entityType'],\n                pathParams: ['entityType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        writeFeatureValues(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+entityType}:writeFeatureValues').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['entityType'],\n                pathParams: ['entityType'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes = Resource$Projects$Locations$Featurestores$Entitytypes;\n    class Resource$Projects$Locations$Featurestores$Entitytypes$Features {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations(this.context);\n        }\n        batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/features:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/features').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes$Features = Resource$Projects$Locations$Featurestores$Entitytypes$Features;\n    class Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations = Resource$Projects$Locations$Featurestores$Entitytypes$Features$Operations;\n    class Resource$Projects$Locations$Featurestores$Entitytypes$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featurestores$Entitytypes$Operations = Resource$Projects$Locations$Featurestores$Entitytypes$Operations;\n    class Resource$Projects$Locations$Featurestores$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Featurestores$Operations = Resource$Projects$Locations$Featurestores$Operations;\n    class Resource$Projects$Locations$Hyperparametertuningjobs {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Hyperparametertuningjobs$Operations(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/hyperparameterTuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/hyperparameterTuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Hyperparametertuningjobs = Resource$Projects$Locations$Hyperparametertuningjobs;\n    class Resource$Projects$Locations$Hyperparametertuningjobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Hyperparametertuningjobs$Operations = Resource$Projects$Locations$Hyperparametertuningjobs$Operations;\n    class Resource$Projects$Locations$Indexendpoints {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Indexendpoints$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/indexEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deployIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+indexEndpoint}:deployIndex').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['indexEndpoint'],\n                pathParams: ['indexEndpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        findNeighbors(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+indexEndpoint}:findNeighbors').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['indexEndpoint'],\n                pathParams: ['indexEndpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/indexEndpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        mutateDeployedIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+indexEndpoint}:mutateDeployedIndex').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['indexEndpoint'],\n                pathParams: ['indexEndpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        readIndexDatapoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+indexEndpoint}:readIndexDatapoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['indexEndpoint'],\n                pathParams: ['indexEndpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        undeployIndex(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+indexEndpoint}:undeployIndex').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['indexEndpoint'],\n                pathParams: ['indexEndpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Indexendpoints = Resource$Projects$Locations$Indexendpoints;\n    class Resource$Projects$Locations$Indexendpoints$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Indexendpoints$Operations = Resource$Projects$Locations$Indexendpoints$Operations;\n    class Resource$Projects$Locations$Indexes {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Indexes$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/indexes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/indexes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeDatapoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+index}:removeDatapoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['index'],\n                pathParams: ['index'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upsertDatapoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+index}:upsertDatapoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['index'],\n                pathParams: ['index'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Indexes = Resource$Projects$Locations$Indexes;\n    class Resource$Projects$Locations$Indexes$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Indexes$Operations = Resource$Projects$Locations$Indexes$Operations;\n    class Resource$Projects$Locations$Metadatastores {\n        constructor(context) {\n            this.context = context;\n            this.artifacts = new Resource$Projects$Locations$Metadatastores$Artifacts(this.context);\n            this.contexts = new Resource$Projects$Locations$Metadatastores$Contexts(this.context);\n            this.executions =\n                new Resource$Projects$Locations$Metadatastores$Executions(this.context);\n            this.metadataSchemas =\n                new Resource$Projects$Locations$Metadatastores$Metadataschemas(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Metadatastores$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/metadataStores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/metadataStores').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores = Resource$Projects$Locations$Metadatastores;\n    class Resource$Projects$Locations$Metadatastores$Artifacts {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Metadatastores$Artifacts$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/artifacts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/artifacts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        purge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/artifacts:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        queryArtifactLineageSubgraph(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+artifact}:queryArtifactLineageSubgraph').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['artifact'],\n                pathParams: ['artifact'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Artifacts = Resource$Projects$Locations$Metadatastores$Artifacts;\n    class Resource$Projects$Locations$Metadatastores$Artifacts$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Artifacts$Operations = Resource$Projects$Locations$Metadatastores$Artifacts$Operations;\n    class Resource$Projects$Locations$Metadatastores$Contexts {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Metadatastores$Contexts$Operations(this.context);\n        }\n        addContextArtifactsAndExecutions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+context}:addContextArtifactsAndExecutions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['context'],\n                pathParams: ['context'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        addContextChildren(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+context}:addContextChildren').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['context'],\n                pathParams: ['context'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/contexts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        purge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/contexts:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        queryContextLineageSubgraph(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+context}:queryContextLineageSubgraph').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['context'],\n                pathParams: ['context'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        removeContextChildren(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+context}:removeContextChildren').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['context'],\n                pathParams: ['context'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Contexts = Resource$Projects$Locations$Metadatastores$Contexts;\n    class Resource$Projects$Locations$Metadatastores$Contexts$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Contexts$Operations = Resource$Projects$Locations$Metadatastores$Contexts$Operations;\n    class Resource$Projects$Locations$Metadatastores$Executions {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Metadatastores$Executions$Operations(this.context);\n        }\n        addExecutionEvents(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+execution}:addExecutionEvents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['execution'],\n                pathParams: ['execution'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/executions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        purge(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/executions:purge').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        queryExecutionInputsAndOutputs(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+execution}:queryExecutionInputsAndOutputs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['execution'],\n                pathParams: ['execution'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Executions = Resource$Projects$Locations$Metadatastores$Executions;\n    class Resource$Projects$Locations$Metadatastores$Executions$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Executions$Operations = Resource$Projects$Locations$Metadatastores$Executions$Operations;\n    class Resource$Projects$Locations$Metadatastores$Metadataschemas {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/metadataSchemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/metadataSchemas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Metadataschemas = Resource$Projects$Locations$Metadatastores$Metadataschemas;\n    class Resource$Projects$Locations$Metadatastores$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Metadatastores$Operations = Resource$Projects$Locations$Metadatastores$Operations;\n    class Resource$Projects$Locations$Migratableresources {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Migratableresources$Operations(this.context);\n        }\n        batchMigrate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/migratableResources:batchMigrate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        search(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/migratableResources:search').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Migratableresources = Resource$Projects$Locations$Migratableresources;\n    class Resource$Projects$Locations$Migratableresources$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Migratableresources$Operations = Resource$Projects$Locations$Migratableresources$Operations;\n    class Resource$Projects$Locations$Modeldeploymentmonitoringjobs {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/modelDeploymentMonitoringJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/modelDeploymentMonitoringJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        pause(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        searchModelDeploymentMonitoringStatsAnomalies(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+modelDeploymentMonitoringJob}:searchModelDeploymentMonitoringStatsAnomalies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['modelDeploymentMonitoringJob'],\n                pathParams: ['modelDeploymentMonitoringJob'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Modeldeploymentmonitoringjobs = Resource$Projects$Locations$Modeldeploymentmonitoringjobs;\n    class Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations = Resource$Projects$Locations$Modeldeploymentmonitoringjobs$Operations;\n    class Resource$Projects$Locations$Models {\n        constructor(context) {\n            this.context = context;\n            this.evaluations = new Resource$Projects$Locations$Models$Evaluations(this.context);\n            this.operations = new Resource$Projects$Locations$Models$Operations(this.context);\n        }\n        copy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/models:copy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        deleteVersion(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:deleteVersion').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/models').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listCheckpoints(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:listCheckpoints').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listVersions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:listVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        mergeVersionAliases(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:mergeVersionAliases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        updateExplanationDataset(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:updateExplanationDataset').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/models:upload').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Models = Resource$Projects$Locations$Models;\n    class Resource$Projects$Locations$Models$Evaluations {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Models$Evaluations$Operations(this.context);\n            this.slices = new Resource$Projects$Locations$Models$Evaluations$Slices(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/evaluations:import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/evaluations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Models$Evaluations = Resource$Projects$Locations$Models$Evaluations;\n    class Resource$Projects$Locations$Models$Evaluations$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Models$Evaluations$Operations = Resource$Projects$Locations$Models$Evaluations$Operations;\n    class Resource$Projects$Locations$Models$Evaluations$Slices {\n        constructor(context) {\n            this.context = context;\n        }\n        batchImport(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:batchImport').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/slices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Models$Evaluations$Slices = Resource$Projects$Locations$Models$Evaluations$Slices;\n    class Resource$Projects$Locations$Models$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Models$Operations = Resource$Projects$Locations$Models$Operations;\n    class Resource$Projects$Locations$Nasjobs {\n        constructor(context) {\n            this.context = context;\n            this.nasTrialDetails =\n                new Resource$Projects$Locations$Nasjobs$Nastrialdetails(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/nasJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/nasJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Nasjobs = Resource$Projects$Locations$Nasjobs;\n    class Resource$Projects$Locations$Nasjobs$Nastrialdetails {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/nasTrialDetails').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Nasjobs$Nastrialdetails = Resource$Projects$Locations$Nasjobs$Nastrialdetails;\n    class Resource$Projects$Locations$Notebookexecutionjobs {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Notebookexecutionjobs$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/notebookExecutionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/notebookExecutionJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Notebookexecutionjobs = Resource$Projects$Locations$Notebookexecutionjobs;\n    class Resource$Projects$Locations$Notebookexecutionjobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Notebookexecutionjobs$Operations = Resource$Projects$Locations$Notebookexecutionjobs$Operations;\n    class Resource$Projects$Locations$Notebookruntimes {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Notebookruntimes$Operations(this.context);\n        }\n        assign(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/notebookRuntimes:assign').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/notebookRuntimes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        start(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:start').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        upgrade(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:upgrade').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Notebookruntimes = Resource$Projects$Locations$Notebookruntimes;\n    class Resource$Projects$Locations$Notebookruntimes$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Notebookruntimes$Operations = Resource$Projects$Locations$Notebookruntimes$Operations;\n    class Resource$Projects$Locations$Notebookruntimetemplates {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Notebookruntimetemplates$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/notebookRuntimeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/notebookRuntimeTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Notebookruntimetemplates = Resource$Projects$Locations$Notebookruntimetemplates;\n    class Resource$Projects$Locations$Notebookruntimetemplates$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Notebookruntimetemplates$Operations = Resource$Projects$Locations$Notebookruntimetemplates$Operations;\n    class Resource$Projects$Locations$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;\n    class Resource$Projects$Locations$Persistentresources {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Persistentresources$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/persistentResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/persistentResources').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        reboot(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:reboot').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Persistentresources = Resource$Projects$Locations$Persistentresources;\n    class Resource$Projects$Locations$Persistentresources$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Persistentresources$Operations = Resource$Projects$Locations$Persistentresources$Operations;\n    class Resource$Projects$Locations$Pipelinejobs {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Pipelinejobs$Operations(this.context);\n        }\n        batchCancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/pipelineJobs:batchCancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        batchDelete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/pipelineJobs:batchDelete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/pipelineJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/pipelineJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Pipelinejobs = Resource$Projects$Locations$Pipelinejobs;\n    class Resource$Projects$Locations$Pipelinejobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Pipelinejobs$Operations = Resource$Projects$Locations$Pipelinejobs$Operations;\n    class Resource$Projects$Locations$Publishers {\n        constructor(context) {\n            this.context = context;\n            this.models = new Resource$Projects$Locations$Publishers$Models(this.context);\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Publishers = Resource$Projects$Locations$Publishers;\n    class Resource$Projects$Locations$Publishers$Models {\n        constructor(context) {\n            this.context = context;\n        }\n        computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        countTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        fetchPredictOperation(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:fetchPredictOperation').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        predict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        predictLongRunning(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:predictLongRunning').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rawPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:rawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        serverStreamingPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:serverStreamingPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamRawPredict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:streamRawPredict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Publishers$Models = Resource$Projects$Locations$Publishers$Models;\n    class Resource$Projects$Locations$Ragcorpora {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Ragcorpora$Operations(this.context);\n            this.ragFiles = new Resource$Projects$Locations$Ragcorpora$Ragfiles(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/ragCorpora').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/ragCorpora').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Ragcorpora = Resource$Projects$Locations$Ragcorpora;\n    class Resource$Projects$Locations$Ragcorpora$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Ragcorpora$Operations = Resource$Projects$Locations$Ragcorpora$Operations;\n    class Resource$Projects$Locations$Ragcorpora$Ragfiles {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/ragFiles:import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/ragFiles').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Ragcorpora$Ragfiles = Resource$Projects$Locations$Ragcorpora$Ragfiles;\n    class Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations = Resource$Projects$Locations$Ragcorpora$Ragfiles$Operations;\n    class Resource$Projects$Locations$Reasoningengines {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Reasoningengines$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/reasoningEngines').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/reasoningEngines').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:query').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamQuery(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:streamQuery').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Reasoningengines = Resource$Projects$Locations$Reasoningengines;\n    class Resource$Projects$Locations$Reasoningengines$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Reasoningengines$Operations = Resource$Projects$Locations$Reasoningengines$Operations;\n    class Resource$Projects$Locations$Schedules {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Schedules$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/schedules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/schedules').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        pause(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:pause').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        resume(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:resume').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Schedules = Resource$Projects$Locations$Schedules;\n    class Resource$Projects$Locations$Schedules$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Schedules$Operations = Resource$Projects$Locations$Schedules$Operations;\n    class Resource$Projects$Locations$Specialistpools {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Specialistpools$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/specialistPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/specialistPools').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Specialistpools = Resource$Projects$Locations$Specialistpools;\n    class Resource$Projects$Locations$Specialistpools$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Specialistpools$Operations = Resource$Projects$Locations$Specialistpools$Operations;\n    class Resource$Projects$Locations$Studies {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Studies$Operations(this.context);\n            this.trials = new Resource$Projects$Locations$Studies$Trials(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/studies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/studies').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        lookup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/studies:lookup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Studies = Resource$Projects$Locations$Studies;\n    class Resource$Projects$Locations$Studies$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Studies$Operations = Resource$Projects$Locations$Studies$Operations;\n    class Resource$Projects$Locations$Studies$Trials {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Studies$Trials$Operations(this.context);\n        }\n        addTrialMeasurement(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+trialName}:addTrialMeasurement').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['trialName'],\n                pathParams: ['trialName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        checkTrialEarlyStoppingState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+trialName}:checkTrialEarlyStoppingState').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['trialName'],\n                pathParams: ['trialName'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        complete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:complete').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/trials').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/trials').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        listOptimalTrials(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/trials:listOptimalTrials').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        stop(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:stop').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        suggest(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/trials:suggest').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Studies$Trials = Resource$Projects$Locations$Studies$Trials;\n    class Resource$Projects$Locations$Studies$Trials$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Studies$Trials$Operations = Resource$Projects$Locations$Studies$Trials$Operations;\n    class Resource$Projects$Locations$Tensorboards {\n        constructor(context) {\n            this.context = context;\n            this.experiments =\n                new Resource$Projects$Locations$Tensorboards$Experiments(this.context);\n            this.operations = new Resource$Projects$Locations$Tensorboards$Operations(this.context);\n        }\n        batchRead(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+tensorboard}:batchRead').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboard'],\n                pathParams: ['tensorboard'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/tensorboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/tensorboards').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        readSize(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+tensorboard}:readSize').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboard'],\n                pathParams: ['tensorboard'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        readUsage(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+tensorboard}:readUsage').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboard'],\n                pathParams: ['tensorboard'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards = Resource$Projects$Locations$Tensorboards;\n    class Resource$Projects$Locations$Tensorboards$Experiments {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Tensorboards$Experiments$Operations(this.context);\n            this.runs = new Resource$Projects$Locations$Tensorboards$Experiments$Runs(this.context);\n        }\n        batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/experiments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        write(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+tensorboardExperiment}:write').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboardExperiment'],\n                pathParams: ['tensorboardExperiment'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments = Resource$Projects$Locations$Tensorboards$Experiments;\n    class Resource$Projects$Locations$Tensorboards$Experiments$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Operations = Resource$Projects$Locations$Tensorboards$Experiments$Operations;\n    class Resource$Projects$Locations$Tensorboards$Experiments$Runs {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations(this.context);\n            this.timeSeries =\n                new Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries(this.context);\n        }\n        batchCreate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/runs:batchCreate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/runs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/runs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        write(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+tensorboardRun}:write').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboardRun'],\n                pathParams: ['tensorboardRun'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs = Resource$Projects$Locations$Tensorboards$Experiments$Runs;\n    class Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations = Resource$Projects$Locations$Tensorboards$Experiments$Runs$Operations;\n    class Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        exportTensorboardTimeSeries(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v1/{+tensorboardTimeSeries}:exportTensorboardTimeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboardTimeSeries'],\n                pathParams: ['tensorboardTimeSeries'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/timeSeries').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        read(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+tensorboardTimeSeries}:read').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['tensorboardTimeSeries'],\n                pathParams: ['tensorboardTimeSeries'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        readBlobData(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+timeSeries}:readBlobData').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['timeSeries'],\n                pathParams: ['timeSeries'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries = Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries;\n    class Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations = Resource$Projects$Locations$Tensorboards$Experiments$Runs$Timeseries$Operations;\n    class Resource$Projects$Locations$Tensorboards$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tensorboards$Operations = Resource$Projects$Locations$Tensorboards$Operations;\n    class Resource$Projects$Locations$Trainingpipelines {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Trainingpipelines$Operations(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/trainingPipelines').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/trainingPipelines').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Trainingpipelines = Resource$Projects$Locations$Trainingpipelines;\n    class Resource$Projects$Locations$Trainingpipelines$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        wait(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:wait').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Trainingpipelines$Operations = Resource$Projects$Locations$Trainingpipelines$Operations;\n    class Resource$Projects$Locations$Tuningjobs {\n        constructor(context) {\n            this.context = context;\n            this.operations = new Resource$Projects$Locations$Tuningjobs$Operations(this.context);\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/tuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/tuningJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        rebaseTunedModel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/tuningJobs:rebaseTunedModel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tuningjobs = Resource$Projects$Locations$Tuningjobs;\n    class Resource$Projects$Locations$Tuningjobs$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Projects$Locations$Tuningjobs$Operations = Resource$Projects$Locations$Tuningjobs$Operations;\n    class Resource$Publishers {\n        constructor(context) {\n            this.context = context;\n            this.models = new Resource$Publishers$Models(this.context);\n        }\n    }\n    aiplatform_v1.Resource$Publishers = Resource$Publishers;\n    class Resource$Publishers$Models {\n        constructor(context) {\n            this.context = context;\n        }\n        computeTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:computeTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        countTokens(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:countTokens').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        generateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:generateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        predict(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+endpoint}:predict').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['endpoint'],\n                pathParams: ['endpoint'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        streamGenerateContent(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://aiplatform.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+model}:streamGenerateContent').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                    apiVersion: '',\n                }, options),\n                params,\n                requiredParams: ['model'],\n                pathParams: ['model'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    aiplatform_v1.Resource$Publishers$Models = Resource$Publishers$Models;\n})(aiplatform_v1 || (exports.aiplatform_v1 = aiplatform_v1 = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}